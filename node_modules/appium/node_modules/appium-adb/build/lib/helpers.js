"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAndroidPlatformAndPath = getAndroidPlatformAndPath;
exports.unzipFile = unzipFile;
exports.getIMEListFromOutput = getIMEListFromOutput;
exports.isShowingLockscreen = isShowingLockscreen;
exports.isCurrentFocusOnKeyguard = isCurrentFocusOnKeyguard;
exports.getSurfaceOrientation = getSurfaceOrientation;
exports.isScreenOnFully = isScreenOnFully;
exports.buildStartCmd = buildStartCmd;
exports.getApksignerForOs = getApksignerForOs;
exports.getApkanalyzerForOs = getApkanalyzerForOs;
exports.buildInstallArgs = buildInstallArgs;
exports.parseManifest = parseManifest;
exports.parseAaptStrings = parseAaptStrings;
exports.parseAapt2Strings = parseAapt2Strings;
exports.formatConfigMarker = formatConfigMarker;
exports.parseJsonData = parseJsonData;
exports.unsignApk = unsignApk;
exports.DEFAULT_ADB_EXEC_TIMEOUT = exports.APK_EXTENSION = exports.APKS_INSTALL_TIMEOUT = exports.APK_INSTALL_TIMEOUT = exports.APKS_EXTENSION = exports.extractMatchingPermissions = exports.getOpenSslForOs = exports.getBuildToolsDirs = exports.getSdkToolsVersion = exports.rootDir = exports.getJavaHome = exports.getJavaForOs = void 0;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger.js"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _semver = _interopRequireDefault(require("semver"));

var _os = _interopRequireDefault(require("os"));

const rootDir = _path.default.resolve(__dirname, process.env.NO_PRECOMPILE ? '..' : '../..');

exports.rootDir = rootDir;
const APKS_EXTENSION = '.apks';
exports.APKS_EXTENSION = APKS_EXTENSION;
const APK_EXTENSION = '.apk';
exports.APK_EXTENSION = APK_EXTENSION;
const APK_INSTALL_TIMEOUT = 60000;
exports.APK_INSTALL_TIMEOUT = APK_INSTALL_TIMEOUT;
const APKS_INSTALL_TIMEOUT = APK_INSTALL_TIMEOUT * 2;
exports.APKS_INSTALL_TIMEOUT = APKS_INSTALL_TIMEOUT;
const DEFAULT_ADB_EXEC_TIMEOUT = 20000;
exports.DEFAULT_ADB_EXEC_TIMEOUT = DEFAULT_ADB_EXEC_TIMEOUT;

async function getAndroidPlatformAndPath() {
  const sdkRoot = process.env.ANDROID_HOME || process.env.ANDROID_SDK_ROOT;

  if (_lodash.default.isEmpty(sdkRoot)) {
    throw new Error('Neither ANDROID_HOME nor ANDROID_SDK_ROOT environment variable was exported');
  }

  const propsPaths = await _appiumSupport.fs.glob('*/build.prop', {
    cwd: _path.default.resolve(sdkRoot, 'platforms'),
    absolute: true
  });
  const platformsMapping = {};

  for (const propsPath of propsPaths) {
    const propsContent = await _appiumSupport.fs.readFile(propsPath, 'utf-8');

    const platformPath = _path.default.dirname(propsPath);

    const platform = _path.default.basename(platformPath);

    const match = /ro\.build\.version\.sdk=(\d+)/.exec(propsContent);

    if (!match) {
      _logger.default.warn(`Cannot read the SDK version from '${propsPath}'. Skipping '${platform}'`);

      continue;
    }

    platformsMapping[parseInt(match[1], 10)] = {
      platform,
      platformPath
    };
  }

  if (_lodash.default.isEmpty(platformsMapping)) {
    _logger.default.warn(`Found zero platform folders at '${_path.default.resolve(sdkRoot, 'platforms')}'. ` + `Do you have any Android SDKs installed?`);

    return {
      platform: null,
      platformPath: null
    };
  }

  const recentSdkVersion = _lodash.default.keys(platformsMapping).sort().reverse()[0];

  const result = platformsMapping[recentSdkVersion];

  _logger.default.debug(`Found the most recent Android platform: ${JSON.stringify(result)}`);

  return result;
}

async function unzipFile(zipPath, dstRoot = _path.default.dirname(zipPath)) {
  _logger.default.debug(`Unzipping '${zipPath}' to '${dstRoot}'`);

  await _appiumSupport.zip.assertValidZip(zipPath);
  await _appiumSupport.zip.extractAllTo(zipPath, dstRoot);

  _logger.default.debug('Unzip successful');
}

async function unsignApk(apkPath) {
  const tmpRoot = await _appiumSupport.tempDir.openDir();
  const metaInfFolderName = 'META-INF';

  try {
    let hasMetaInf = false;
    await _appiumSupport.zip.readEntries(apkPath, ({
      entry
    }) => {
      hasMetaInf = entry.fileName.startsWith(`${metaInfFolderName}/`);
      return !hasMetaInf;
    });

    if (!hasMetaInf) {
      return false;
    }

    const tmpZipRoot = _path.default.resolve(tmpRoot, 'apk');

    await _appiumSupport.zip.extractAllTo(apkPath, tmpZipRoot);
    await _appiumSupport.fs.rimraf(_path.default.resolve(tmpZipRoot, metaInfFolderName));

    const tmpResultPath = _path.default.resolve(tmpRoot, _path.default.basename(apkPath));

    await _appiumSupport.zip.toArchive(tmpResultPath, {
      cwd: tmpZipRoot
    });
    await _appiumSupport.fs.unlink(apkPath);
    await _appiumSupport.fs.mv(tmpResultPath, apkPath);
    return true;
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }
}

function getIMEListFromOutput(stdout) {
  let engines = [];

  for (let line of stdout.split('\n')) {
    if (line.length > 0 && line[0] !== ' ') {
      engines.push(line.trim().replace(/:$/, ''));
    }
  }

  return engines;
}

const getJavaHome = _lodash.default.memoize(async function getJavaHome() {
  const result = process.env.JAVA_HOME;

  if (!result) {
    throw new Error('The JAVA_HOME environment variable must be set for Android Tools to work properly');
  }

  if (!(await _appiumSupport.fs.exists(result))) {
    throw new Error(`The JAVA_HOME location '${result}' must exist`);
  }

  const stats = await _appiumSupport.fs.stat(result);

  if (!stats.isDirectory()) {
    throw new Error(`The JAVA_HOME location '${result}' must be a valid folder`);
  }

  return result;
});

exports.getJavaHome = getJavaHome;

const getJavaForOs = _lodash.default.memoize(async function getJavaForOs() {
  return _path.default.resolve(await getJavaHome(), 'bin', `java${_appiumSupport.system.isWindows() ? '.exe' : ''}`);
});

exports.getJavaForOs = getJavaForOs;

const getOpenSslForOs = async function () {
  const binaryName = `openssl${_appiumSupport.system.isWindows() ? '.exe' : ''}`;

  try {
    return await _appiumSupport.fs.which(binaryName);
  } catch (err) {
    throw new Error('The openssl tool must be installed on the system and available on the path');
  }
};

exports.getOpenSslForOs = getOpenSslForOs;

async function getApksignerForOs(sysHelpers) {
  return await sysHelpers.getBinaryFromSdkRoot('apksigner.jar');
}

async function getApkanalyzerForOs(sysHelpers) {
  return await sysHelpers.getBinaryFromSdkRoot('apkanalyzer');
}

function isShowingLockscreen(dumpsys) {
  return /(mShowingLockscreen=true|mDreamingLockscreen=true)/gi.test(dumpsys);
}

function isCurrentFocusOnKeyguard(dumpsys) {
  let m = /mCurrentFocus.+Keyguard/gi.exec(dumpsys);
  return m && m.length && m[0] ? true : false;
}

function getSurfaceOrientation(dumpsys) {
  let m = /SurfaceOrientation: \d/gi.exec(dumpsys);
  return m && parseInt(m[0].split(':')[1], 10);
}

function isScreenOnFully(dumpsys) {
  let m = /mScreenOnFully=\w+/gi.exec(dumpsys);
  return !m || m && m.length > 0 && m[0].split('=')[1] === 'true' || false;
}

function buildStartCmd(startAppOptions, apiLevel) {
  const {
    user,
    waitForLaunch,
    pkg,
    activity,
    action,
    category,
    stopApp,
    flags
  } = startAppOptions;
  const cmd = ['am', 'start'];

  if (_appiumSupport.util.hasValue(user)) {
    cmd.push('--user', user);
  }

  if (waitForLaunch) {
    cmd.push('-W');
  }

  if (activity && pkg) {
    cmd.push('-n', `${pkg}/${activity}`);
  }

  if (stopApp && apiLevel >= 15) {
    cmd.push('-S');
  }

  if (action) {
    cmd.push('-a', action);
  }

  if (category) {
    cmd.push('-c', category);
  }

  if (flags) {
    cmd.push('-f', flags);
  }

  if (startAppOptions.optionalIntentArguments) {
    let parseKeyValue = function (str) {
      str = str.trim();
      let space = str.indexOf(' ');

      if (space === -1) {
        return str.length ? [str] : [];
      } else {
        return [str.substring(0, space).trim(), str.substring(space + 1).trim()];
      }
    };

    let optionalIntentArguments = ` ${startAppOptions.optionalIntentArguments}`;
    let re = / (-[^\s]+) (.+)/;

    while (true) {
      let args = re.exec(optionalIntentArguments);

      if (!args) {
        if (optionalIntentArguments.length) {
          cmd.push.apply(cmd, parseKeyValue(optionalIntentArguments));
        }

        break;
      }

      let flag = args[1];
      let flagPos = optionalIntentArguments.indexOf(flag);

      if (flagPos !== 0) {
        let prevArgs = optionalIntentArguments.substring(0, flagPos);
        cmd.push.apply(cmd, parseKeyValue(prevArgs));
      }

      cmd.push(flag);
      optionalIntentArguments = args[2];
    }
  }

  return cmd;
}

const getSdkToolsVersion = _lodash.default.memoize(async function getSdkToolsVersion() {
  const androidHome = process.env.ANDROID_HOME;

  if (!androidHome) {
    throw new Error('ANDROID_HOME environment variable is expected to be set');
  }

  const propertiesPath = _path.default.resolve(androidHome, 'tools', 'source.properties');

  if (!(await _appiumSupport.fs.exists(propertiesPath))) {
    _logger.default.warn(`Cannot find ${propertiesPath} file to read SDK version from`);

    return;
  }

  const propertiesContent = await _appiumSupport.fs.readFile(propertiesPath, 'utf8');
  const versionMatcher = new RegExp(/Pkg\.Revision=(\d+)\.?(\d+)?\.?(\d+)?/);
  const match = versionMatcher.exec(propertiesContent);

  if (match) {
    return {
      major: parseInt(match[1], 10),
      minor: match[2] ? parseInt(match[2], 10) : 0,
      build: match[3] ? parseInt(match[3], 10) : 0
    };
  }

  _logger.default.warn(`Cannot parse "Pkg.Revision" value from ${propertiesPath}`);
});

exports.getSdkToolsVersion = getSdkToolsVersion;

const getBuildToolsDirs = _lodash.default.memoize(async function getBuildToolsDirs(sdkRoot) {
  let buildToolsDirs = await _appiumSupport.fs.glob('*/', {
    cwd: _path.default.resolve(sdkRoot, 'build-tools'),
    absolute: true
  });

  try {
    buildToolsDirs = buildToolsDirs.map(dir => [_path.default.basename(dir), dir]).sort((a, b) => _semver.default.rcompare(a[0], b[0])).map(pair => pair[1]);
  } catch (err) {
    _logger.default.warn(`Cannot sort build-tools folders ${JSON.stringify(buildToolsDirs.map(dir => _path.default.basename(dir)))} ` + `by semantic version names.`);

    _logger.default.warn(`Falling back to sorting by modification date. Original error: ${err.message}`);

    const pairs = await _bluebird.default.map(buildToolsDirs, async dir => [(await _appiumSupport.fs.stat(dir)).mtime.valueOf(), dir]);
    buildToolsDirs = pairs.sort((a, b) => a[0] < b[0]).map(pair => pair[1]);
  }

  _logger.default.info(`Found ${buildToolsDirs.length} 'build-tools' folders under '${sdkRoot}' (newest first):`);

  for (let dir of buildToolsDirs) {
    _logger.default.info(`    ${dir}`);
  }

  return buildToolsDirs;
});

exports.getBuildToolsDirs = getBuildToolsDirs;

const extractMatchingPermissions = function (dumpsysOutput, groupNames, grantedState = null) {
  const groupPatternByName = groupName => new RegExp(`^(\\s*${_lodash.default.escapeRegExp(groupName)} permissions:[\\s\\S]+)`, 'm');

  const indentPattern = /\S|$/;
  const permissionNamePattern = /android\.\w*\.?permission\.\w+/;
  const grantedStatePattern = /\bgranted=(\w+)/;
  const result = [];

  for (const groupName of groupNames) {
    const groupMatch = groupPatternByName(groupName).exec(dumpsysOutput);

    if (!groupMatch) {
      continue;
    }

    const lines = groupMatch[1].split('\n');

    if (lines.length < 2) {
      continue;
    }

    const titleIndent = lines[0].search(indentPattern);

    for (const line of lines.slice(1)) {
      const currentIndent = line.search(indentPattern);

      if (currentIndent <= titleIndent) {
        break;
      }

      const permissionNameMatch = permissionNamePattern.exec(line);

      if (!permissionNameMatch) {
        continue;
      }

      const item = {
        permission: permissionNameMatch[0]
      };
      const grantedStateMatch = grantedStatePattern.exec(line);

      if (grantedStateMatch) {
        item.granted = grantedStateMatch[1] === 'true';
      }

      result.push(item);
    }
  }

  const filteredResult = result.filter(item => !_lodash.default.isBoolean(grantedState) || item.granted === grantedState).map(item => item.permission);

  _logger.default.debug(`Retrieved ${_appiumSupport.util.pluralize('permission', filteredResult.length, true)} ` + `from ${groupNames} ${_appiumSupport.util.pluralize('group', groupNames.length, false)}`);

  return filteredResult;
};

exports.extractMatchingPermissions = extractMatchingPermissions;

function buildInstallArgs(apiLevel, options = {}) {
  const result = [];

  if (!_appiumSupport.util.hasValue(options.replace) || options.replace) {
    result.push('-r');
  }

  if (options.allowTestPackages) {
    result.push('-t');
  }

  if (options.useSdcard) {
    result.push('-s');
  }

  if (options.grantPermissions) {
    if (apiLevel < 23) {
      _logger.default.debug(`Skipping permissions grant option, since ` + `the current API level ${apiLevel} does not support applications ` + `permissions customization`);
    } else {
      result.push('-g');
    }
  }

  return result;
}

function parseManifest(manifest) {
  const result = {
    pkg: manifest.package,
    versionCode: parseInt(manifest.versionCode, 10),
    versionName: manifest.versionName || null
  };

  if (!manifest.application) {
    return result;
  }

  for (const activity of [...manifest.application.activities, ...manifest.application.activityAliases]) {
    if (activity.enabled === false || _lodash.default.isEmpty(activity.intentFilters)) {
      continue;
    }

    for (const {
      actions,
      categories
    } of activity.intentFilters) {
      if (_lodash.default.isEmpty(actions) || _lodash.default.isEmpty(categories)) {
        continue;
      }

      const isMainAction = actions.some(({
        name
      }) => name === 'android.intent.action.MAIN');
      const isLauncherCategory = categories.some(({
        name
      }) => name === 'android.intent.category.LAUNCHER');

      if (isMainAction && isLauncherCategory) {
        result.activity = activity.name;
        return result;
      }
    }
  }

  return result;
}

function parseAaptStrings(rawOutput, configMarker) {
  const normalizeStringMatch = function (s) {
    return s.replace(/"$/, '').replace(/^"/, '').replace(/\\"/g, '"');
  };

  const apkStrings = {};
  let isInConfig = false;
  let currentResourceId = null;
  let isInPluralGroup = false;
  const quotedStringPattern = /"[^"\\]*(?:\\.[^"\\]*)*"/;

  for (const line of rawOutput.split(_os.default.EOL)) {
    const trimmedLine = line.trim();

    if (_lodash.default.isEmpty(trimmedLine)) {
      continue;
    }

    if (['config', 'type', 'spec', 'Package'].some(x => trimmedLine.startsWith(x))) {
      isInConfig = trimmedLine.startsWith(`config ${configMarker}:`);
      currentResourceId = null;
      isInPluralGroup = false;
      continue;
    }

    if (!isInConfig) {
      continue;
    }

    if (trimmedLine.startsWith('resource')) {
      isInPluralGroup = false;
      currentResourceId = null;

      if (trimmedLine.includes(':string/')) {
        const match = /:string\/(\S+):/.exec(trimmedLine);

        if (match) {
          currentResourceId = match[1];
        }
      } else if (trimmedLine.includes(':plurals/')) {
        const match = /:plurals\/(\S+):/.exec(trimmedLine);

        if (match) {
          currentResourceId = match[1];
          isInPluralGroup = true;
        }
      }

      continue;
    }

    if (currentResourceId && trimmedLine.startsWith('(string')) {
      const match = quotedStringPattern.exec(trimmedLine);

      if (match) {
        apkStrings[currentResourceId] = normalizeStringMatch(match[0]);
      }

      currentResourceId = null;
      continue;
    }

    if (currentResourceId && isInPluralGroup && trimmedLine.includes(': (string')) {
      const match = quotedStringPattern.exec(trimmedLine);

      if (match) {
        apkStrings[currentResourceId] = [...(apkStrings[currentResourceId] || []), normalizeStringMatch(match[0])];
      }

      continue;
    }
  }

  return apkStrings;
}

function parseAapt2Strings(rawOutput, configMarker) {
  const allLines = rawOutput.split(_os.default.EOL);

  function extractContent(startIdx) {
    let idx = startIdx;
    const startCharPos = allLines[startIdx].indexOf('"');

    if (startCharPos < 0) {
      return [null, idx];
    }

    let result = '';

    while (idx < allLines.length) {
      const terminationCharMatch = /"$/.exec(allLines[idx]);

      if (terminationCharMatch) {
        const terminationCharPos = terminationCharMatch.index;

        if (startIdx === idx) {
          return [allLines[idx].substring(startCharPos + 1, terminationCharPos), idx];
        }

        return [`${result}\\n${_lodash.default.trimStart(allLines[idx].substring(0, terminationCharPos))}`, idx];
      }

      if (idx > startIdx) {
        result += `\\n${_lodash.default.trimStart(allLines[idx])}`;
      } else {
        result += allLines[idx].substring(startCharPos + 1);
      }

      ++idx;
    }

    return [result, idx];
  }

  const apkStrings = {};
  let currentResourceId = null;
  let isInPluralGroup = false;
  let isInCurrentConfig = false;
  let lineIndex = 0;

  while (lineIndex < allLines.length) {
    const trimmedLine = allLines[lineIndex].trim();

    if (_lodash.default.isEmpty(trimmedLine)) {
      ++lineIndex;
      continue;
    }

    if (['type', 'Package'].some(x => trimmedLine.startsWith(x))) {
      currentResourceId = null;
      isInPluralGroup = false;
      isInCurrentConfig = false;
      ++lineIndex;
      continue;
    }

    if (trimmedLine.startsWith('resource')) {
      isInPluralGroup = false;
      currentResourceId = null;
      isInCurrentConfig = false;

      if (trimmedLine.includes('string/')) {
        const match = /string\/(\S+)/.exec(trimmedLine);

        if (match) {
          currentResourceId = match[1];
        }
      } else if (trimmedLine.includes('plurals/')) {
        const match = /plurals\/(\S+)/.exec(trimmedLine);

        if (match) {
          currentResourceId = match[1];
          isInPluralGroup = true;
        }
      }

      ++lineIndex;
      continue;
    }

    if (currentResourceId) {
      if (isInPluralGroup) {
        if (trimmedLine.startsWith('(')) {
          isInCurrentConfig = trimmedLine.startsWith(`(${configMarker})`);
          ++lineIndex;
          continue;
        }

        if (isInCurrentConfig) {
          const [content, idx] = extractContent(lineIndex);
          lineIndex = idx;

          if (_lodash.default.isString(content)) {
            apkStrings[currentResourceId] = [...(apkStrings[currentResourceId] || []), content];
          }
        }
      } else if (trimmedLine.startsWith(`(${configMarker})`)) {
        const [content, idx] = extractContent(lineIndex);
        lineIndex = idx;

        if (_lodash.default.isString(content)) {
          apkStrings[currentResourceId] = content;
        }

        currentResourceId = null;
      }
    }

    ++lineIndex;
  }

  return apkStrings;
}

async function formatConfigMarker(configsGetter, desiredMarker, defaultMarker) {
  let configMarker = desiredMarker || defaultMarker;

  if (configMarker.includes('-') && !configMarker.includes('-r')) {
    configMarker = configMarker.replace('-', '-r');
  }

  const configs = await configsGetter();

  _logger.default.debug(`Resource configurations: ${JSON.stringify(configs)}`);

  if (configMarker.toLowerCase().startsWith('en') && !configs.some(x => x.trim() === configMarker)) {
    _logger.default.debug(`Resource configuration name '${configMarker}' is unknown. ` + `Replacing it with '${defaultMarker}'`);

    configMarker = defaultMarker;
  } else {
    _logger.default.debug(`Selected configuration: '${configMarker}'`);
  }

  return configMarker;
}

function parseJsonData(output, entityName) {
  if (!/\bresult=-1\b/.test(output) || !/\bdata="/.test(output)) {
    _logger.default.debug(output);

    throw new Error(`Cannot retrieve ${entityName} from the device. ` + 'Check the server log for more details');
  }

  const match = /\bdata=(".+)/.exec(output);

  if (!match) {
    _logger.default.debug(output);

    throw new Error(`Cannot parse ${entityName} from the command output. ` + 'Check the server log for more details');
  }

  const jsonStr = _lodash.default.trim(match[1]).replace(/(^")|("$)/g, '');

  try {
    return JSON.parse(jsonStr);
  } catch (e) {
    _logger.default.debug(jsonStr);

    throw new Error(`Cannot parse ${entityName} from the resulting data string. ` + 'Check the server log for more details');
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.qualifyActivityName = qualifyActivityName;
exports.copyGradleProjectRecursively = copyGradleProjectRecursively;
exports.requireOptions = requireOptions;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

function qualifyActivityName(activityName, packageName) {
  if ([activityName, packageName].some(name => !name || _lodash.default.includes(name, '*'))) {
    return activityName;
  }

  const dotPos = activityName.indexOf('.');

  if (dotPos > 0) {
    return activityName;
  }

  return `${packageName}${dotPos === 0 ? '' : '.'}${activityName}`;
}

async function copyGradleProjectRecursively(sourceBaseDir, targetBaseDir) {
  await _appiumSupport.fs.walkDir(sourceBaseDir, true, async (itemPath, isDirectory) => {
    const relativePath = _path.default.relative(sourceBaseDir, itemPath);

    const targetPath = _path.default.resolve(targetBaseDir, relativePath);

    const isInGradleBuildDir = `${_path.default.sep}${itemPath}`.includes(`${_path.default.sep}build${_path.default.sep}`);

    if (isInGradleBuildDir) {
      return false;
    }

    if (isDirectory) {
      await (0, _appiumSupport.mkdirp)(targetPath);
    } else {
      await _appiumSupport.fs.copyFile(itemPath, targetPath);
    }

    return false;
  });
}

function requireOptions(opts, requiredKeys = []) {
  const missingKeys = _lodash.default.difference(requiredKeys, _lodash.default.keys(opts));

  if (!_lodash.default.isEmpty(missingKeys)) {
    throw new Error(`The following options are required: ${missingKeys}`);
  }

  return opts;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlscy5qcyJdLCJuYW1lcyI6WyJxdWFsaWZ5QWN0aXZpdHlOYW1lIiwiYWN0aXZpdHlOYW1lIiwicGFja2FnZU5hbWUiLCJzb21lIiwibmFtZSIsIl8iLCJpbmNsdWRlcyIsImRvdFBvcyIsImluZGV4T2YiLCJjb3B5R3JhZGxlUHJvamVjdFJlY3Vyc2l2ZWx5Iiwic291cmNlQmFzZURpciIsInRhcmdldEJhc2VEaXIiLCJmcyIsIndhbGtEaXIiLCJpdGVtUGF0aCIsImlzRGlyZWN0b3J5IiwicmVsYXRpdmVQYXRoIiwicGF0aCIsInJlbGF0aXZlIiwidGFyZ2V0UGF0aCIsInJlc29sdmUiLCJpc0luR3JhZGxlQnVpbGREaXIiLCJzZXAiLCJjb3B5RmlsZSIsInJlcXVpcmVPcHRpb25zIiwib3B0cyIsInJlcXVpcmVkS2V5cyIsIm1pc3NpbmdLZXlzIiwiZGlmZmVyZW5jZSIsImtleXMiLCJpc0VtcHR5IiwiRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFTQSxTQUFTQSxtQkFBVCxDQUE4QkMsWUFBOUIsRUFBNENDLFdBQTVDLEVBQXlEO0FBSXZELE1BQUksQ0FBQ0QsWUFBRCxFQUFlQyxXQUFmLEVBQTRCQyxJQUE1QixDQUFrQ0MsSUFBRCxJQUFVLENBQUNBLElBQUQsSUFBU0MsZ0JBQUVDLFFBQUYsQ0FBV0YsSUFBWCxFQUFpQixHQUFqQixDQUFwRCxDQUFKLEVBQWdGO0FBQzlFLFdBQU9ILFlBQVA7QUFDRDs7QUFFRCxRQUFNTSxNQUFNLEdBQUdOLFlBQVksQ0FBQ08sT0FBYixDQUFxQixHQUFyQixDQUFmOztBQUNBLE1BQUlELE1BQU0sR0FBRyxDQUFiLEVBQWdCO0FBQ2QsV0FBT04sWUFBUDtBQUNEOztBQUNELFNBQVEsR0FBRUMsV0FBWSxHQUFFSyxNQUFNLEtBQUssQ0FBWCxHQUFlLEVBQWYsR0FBb0IsR0FBSSxHQUFFTixZQUFhLEVBQS9EO0FBQ0Q7O0FBT0QsZUFBZVEsNEJBQWYsQ0FBNkNDLGFBQTdDLEVBQTREQyxhQUE1RCxFQUEyRTtBQUN6RSxRQUFNQyxrQkFBR0MsT0FBSCxDQUFXSCxhQUFYLEVBQTBCLElBQTFCLEVBQWdDLE9BQU9JLFFBQVAsRUFBaUJDLFdBQWpCLEtBQWlDO0FBQ3JFLFVBQU1DLFlBQVksR0FBR0MsY0FBS0MsUUFBTCxDQUFjUixhQUFkLEVBQTZCSSxRQUE3QixDQUFyQjs7QUFDQSxVQUFNSyxVQUFVLEdBQUdGLGNBQUtHLE9BQUwsQ0FBYVQsYUFBYixFQUE0QkssWUFBNUIsQ0FBbkI7O0FBRUEsVUFBTUssa0JBQWtCLEdBQUksR0FBRUosY0FBS0ssR0FBSSxHQUFFUixRQUFTLEVBQXZCLENBQXlCUixRQUF6QixDQUFtQyxHQUFFVyxjQUFLSyxHQUFJLFFBQU9MLGNBQUtLLEdBQUksRUFBOUQsQ0FBM0I7O0FBQ0EsUUFBSUQsa0JBQUosRUFBd0I7QUFDdEIsYUFBTyxLQUFQO0FBQ0Q7O0FBRUQsUUFBSU4sV0FBSixFQUFpQjtBQUNmLFlBQU0sMkJBQU9JLFVBQVAsQ0FBTjtBQUNELEtBRkQsTUFFTztBQUNMLFlBQU1QLGtCQUFHVyxRQUFILENBQVlULFFBQVosRUFBc0JLLFVBQXRCLENBQU47QUFDRDs7QUFDRCxXQUFPLEtBQVA7QUFDRCxHQWZLLENBQU47QUFnQkQ7O0FBRUQsU0FBU0ssY0FBVCxDQUF5QkMsSUFBekIsRUFBK0JDLFlBQVksR0FBRyxFQUE5QyxFQUFrRDtBQUNoRCxRQUFNQyxXQUFXLEdBQUd0QixnQkFBRXVCLFVBQUYsQ0FBYUYsWUFBYixFQUEyQnJCLGdCQUFFd0IsSUFBRixDQUFPSixJQUFQLENBQTNCLENBQXBCOztBQUNBLE1BQUksQ0FBQ3BCLGdCQUFFeUIsT0FBRixDQUFVSCxXQUFWLENBQUwsRUFBNkI7QUFDM0IsVUFBTSxJQUFJSSxLQUFKLENBQVcsdUNBQXNDSixXQUFZLEVBQTdELENBQU47QUFDRDs7QUFDRCxTQUFPRixJQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcywgbWtkaXJwIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG4vKipcbiAqIGh0dHBzOi8vYW5kcm9pZC5nb29nbGVzb3VyY2UuY29tL3BsYXRmb3JtL2ZyYW1ld29ya3MvYmFzZS8rL21hc3Rlci90b29scy9hYXB0L1Jlc291cmNlLmNwcCM3NTVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYWN0aXZpdHlOYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFja2FnZU5hbWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBxdWFsaWZpZWQgYWN0aXZpdHkgbmFtZVxuICovXG5mdW5jdGlvbiBxdWFsaWZ5QWN0aXZpdHlOYW1lIChhY3Rpdml0eU5hbWUsIHBhY2thZ2VOYW1lKSB7XG4gIC8vIGlmIGVpdGhlciBhY3Rpdml0eSBvciBwYWNrYWdlIG5hbWUgaXMgbm90IHNldFxuICAvLyBvciBhbnkgb2YgdGhlc2UgY29udGFpbiB3aWxkY2FyZHMgdGhlbiB0aGVyZSBpc1xuICAvLyBubyBwb2ludCBpbiBxdWFsaWZ5aW5nIHRoZSBhY3Rpdml0eSBuYW1lXG4gIGlmIChbYWN0aXZpdHlOYW1lLCBwYWNrYWdlTmFtZV0uc29tZSgobmFtZSkgPT4gIW5hbWUgfHwgXy5pbmNsdWRlcyhuYW1lLCAnKicpKSkge1xuICAgIHJldHVybiBhY3Rpdml0eU5hbWU7XG4gIH1cblxuICBjb25zdCBkb3RQb3MgPSBhY3Rpdml0eU5hbWUuaW5kZXhPZignLicpO1xuICBpZiAoZG90UG9zID4gMCkge1xuICAgIHJldHVybiBhY3Rpdml0eU5hbWU7XG4gIH1cbiAgcmV0dXJuIGAke3BhY2thZ2VOYW1lfSR7ZG90UG9zID09PSAwID8gJycgOiAnLid9JHthY3Rpdml0eU5hbWV9YDtcbn1cblxuLyoqXG4gKiBSZWN1cnNpdmVseSBjb3B5IGFsbCBmaWxlcyBleGNlcHQgYnVpbGQgZGlyZWN0b3JpZXMgY29udGVudHNcbiAqIEBwYXJhbSBzb3VyY2VCYXNlRGlyIHtzdHJpbmd9IGRpcmVjdG9yeSB0byBjb3B5IGZpbGVzIGZyb21cbiAqIEBwYXJhbSB0YXJnZXRCYXNlRGlyIHtzdHJpbmd9IGRpcmVjdG9yeSB0byBjb3B5IGZpbGVzIHRvXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNvcHlHcmFkbGVQcm9qZWN0UmVjdXJzaXZlbHkgKHNvdXJjZUJhc2VEaXIsIHRhcmdldEJhc2VEaXIpIHtcbiAgYXdhaXQgZnMud2Fsa0Rpcihzb3VyY2VCYXNlRGlyLCB0cnVlLCBhc3luYyAoaXRlbVBhdGgsIGlzRGlyZWN0b3J5KSA9PiB7XG4gICAgY29uc3QgcmVsYXRpdmVQYXRoID0gcGF0aC5yZWxhdGl2ZShzb3VyY2VCYXNlRGlyLCBpdGVtUGF0aCk7XG4gICAgY29uc3QgdGFyZ2V0UGF0aCA9IHBhdGgucmVzb2x2ZSh0YXJnZXRCYXNlRGlyLCByZWxhdGl2ZVBhdGgpO1xuXG4gICAgY29uc3QgaXNJbkdyYWRsZUJ1aWxkRGlyID0gYCR7cGF0aC5zZXB9JHtpdGVtUGF0aH1gLmluY2x1ZGVzKGAke3BhdGguc2VwfWJ1aWxkJHtwYXRoLnNlcH1gKTtcbiAgICBpZiAoaXNJbkdyYWRsZUJ1aWxkRGlyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlyZWN0b3J5KSB7XG4gICAgICBhd2FpdCBta2RpcnAodGFyZ2V0UGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IGZzLmNvcHlGaWxlKGl0ZW1QYXRoLCB0YXJnZXRQYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVxdWlyZU9wdGlvbnMgKG9wdHMsIHJlcXVpcmVkS2V5cyA9IFtdKSB7XG4gIGNvbnN0IG1pc3NpbmdLZXlzID0gXy5kaWZmZXJlbmNlKHJlcXVpcmVkS2V5cywgXy5rZXlzKG9wdHMpKTtcbiAgaWYgKCFfLmlzRW1wdHkobWlzc2luZ0tleXMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgZm9sbG93aW5nIG9wdGlvbnMgYXJlIHJlcXVpcmVkOiAke21pc3NpbmdLZXlzfWApO1xuICB9XG4gIHJldHVybiBvcHRzO1xufVxuXG5leHBvcnQgeyBxdWFsaWZ5QWN0aXZpdHlOYW1lLCBjb3B5R3JhZGxlUHJvamVjdFJlY3Vyc2l2ZWx5LCByZXF1aXJlT3B0aW9ucyB9O1xuIl0sImZpbGUiOiJsaWIvdXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==

/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const selenium_webdriver_1 = require("selenium-webdriver");
const by2_1 = require("./by2");
class AppiumDriver {
    get(by, timeout, message) {
        if (this.webDriver)
            return this.webDriver.wait(selenium_webdriver_1.until.elementLocated(by), timeout, message);
        throw new Error("no valid connection");
    }
    getByAccessibilityId(id, timeout, message) {
        return this.get(by2_1.By2.accessibilityId(id), timeout, message);
    }
    getByName(name, timeout, message) {
        return this.get(by2_1.By2.name(name), timeout, message);
    }
    getById(id, timeout, message) {
        return this.get(by2_1.By2.id(id), timeout, message);
    }
    getByclassName(className, timeout, message) {
        return this.get(by2_1.By2.className(className), timeout, message);
    }
    sleep(ms) {
        if (this.webDriver)
            return this.webDriver.sleep(ms);
        throw new Error("no valid connection");
    }
    seleniumDriver() {
        if (this.webDriver)
            return this.webDriver;
        throw new Error("no valid connection");
    }
    lastError() {
        return this.error_;
    }
    start() {
        return new Promise((resolve, reject) => {
            new selenium_webdriver_1.Builder()
                .usingServer(this.url_)
                .withCapabilities(this.capabilities_)
                .build()
                .then(driver => { this.webDriver = driver; resolve(); })
                .catch(e => { this.error_ = e; reject(e); });
        });
    }
    stop() {
        return new Promise((resolve, reject) => {
            this.webDriver && this.webDriver
                .quit()
                .then(() => resolve())
                .catch(e => { this.error_ = e; reject(e); });
            resolve();
        });
    }
    restart() {
        return this._restart();
    }
    _restart() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.stop().catch(); //ignore stop error
            yield this.start();
        });
    }
    constructor(capabilities, url = "http://localhost:4723/wd/hub") {
        this.capabilities_ = capabilities;
        this.url_ = url;
    }
    isActive() {
        return new Promise(resolve => {
            this.webDriver && this.webDriver
                .getSession()
                .then(() => resolve(true), reason => resolve(false));
            resolve(false);
        });
    }
}
function createAppiumWebDriver(capabilities, url) {
    return new AppiumDriver(capabilities, url);
}
exports.createAppiumWebDriver = createAppiumWebDriver;
//# sourceMappingURL=appiumdriver.js.map
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const selenium_webdriver_1 = require("selenium-webdriver");
const command_1 = require("selenium-webdriver/lib/command");
const by2_1 = require("./by2");
const mobileextension_1 = require("./mobileextension");
class WebDriver2 {
    enableMobileJSONWire() {
        mobileextension_1.configureMobileJSONWireExtension(this.getExecutor());
    }
    getNetworkCondition() {
        return this.execute(new command_1.Command(mobileextension_1.MobileJSONWireCommand.GET_NETWORK_CONDITION));
    }
    setNetworkCondition(params) {
        return this.execute(new command_1.Command(mobileextension_1.MobileJSONWireCommand.SET_NETWORK_CONDITION)
            .setParameter('type', params.type));
    }
    /**
    *   @see WebDriver.wait
    */
    wait(condition, opt_timeout, opt_message) {
        return this.seleniumDriver().wait(condition, opt_timeout, opt_message);
    }
    /**
  *   @see WebDriver.wait
  */
    wait2(condition, opt_timeout, opt_message) {
        return this.seleniumDriver().wait(condition, opt_timeout, opt_message);
    }
    /**
  *   @see WebDriver.sleep
  */
    sleep(ms) {
        return this.seleniumDriver().sleep(ms);
    }
    /**
  *   @see WebDriver.execute
  */
    execute(command, description) {
        return this.seleniumDriver().execute(command, description);
    }
    /**
  *   @see WebDriver.setFileDetector
  */
    setFileDetector(detector) {
        return this.seleniumDriver().setFileDetector(detector);
    }
    /**
  *   @see WebDriver.getExecutor
  */
    getExecutor() {
        return this.seleniumDriver().getExecutor();
    }
    /**
  *   @see WebDriver.getSession
  */
    getSession() {
        return this.seleniumDriver().getSession();
    }
    /**
  *   @see WebDriver.getCapabilities
  */
    getCapabilities() {
        return this.seleniumDriver().getCapabilities();
    }
    /**
  *   @see WebDriver.quit
  */
    quit() {
        return this.stop();
    }
    /**
  *   @see WebDriver.actions
  */
    actions(options) {
        return this.seleniumDriver().actions(options);
    }
    /**
  *   @see WebDriver.executeScript
  */
    executeScript(script, ...var_args) {
        return this.seleniumDriver().executeScript(script, var_args);
    }
    /**
  *   @see WebDriver.executeAsyncScript
  */
    executeAsyncScript(script, ...var_args) {
        return this.seleniumDriver().executeAsyncScript(script, var_args);
    }
    /**
  *   @see WebDriver.getWindowHandle
  */
    getWindowHandle() {
        return this.seleniumDriver().getWindowHandle();
    }
    /**
    *   @see WebDriver.getAllWindowHandles
    */
    getAllWindowHandles() {
        return this.seleniumDriver().getAllWindowHandles();
    }
    /**
    *   @see WebDriver.getPageSource
    */
    getPageSource() {
        return this.seleniumDriver().getPageSource();
    }
    /**
    *   @see WebDriver.close
    */
    close() {
        return this.seleniumDriver().close();
    }
    /**
    *   @see WebDriver.get
    */
    get(url) {
        return this.seleniumDriver().get(url);
    }
    /**
    *   @see WebDriver.getCurrentUrl
    */
    getCurrentUrl() {
        return this.seleniumDriver().getCurrentUrl();
    }
    /**
    *   @see WebDriver.getTitle
    */
    getTitle() {
        return this.seleniumDriver().getTitle();
    }
    /**
    *   @see WebDriver.findElement
    */
    findElement(locator) {
        return this.seleniumDriver().findElement(locator);
    }
    /**
    *   @see WebDriver.findElements
    */
    findElements(locator) {
        return this.seleniumDriver().findElements(locator);
    }
    /**
    *   @see WebDriver.takeScreenshot
    */
    takeScreenshot() {
        return this.seleniumDriver().takeScreenshot();
    }
    /**
    *   @see WebDriver.manage
    */
    manage() {
        return this.seleniumDriver().manage();
    }
    /**
    *   @see WebDriver.navigate
    */
    navigate() {
        return this.seleniumDriver().navigate();
    }
    /**
    *   @see WebDriver.switchTo
    */
    switchTo() {
        return this.seleniumDriver().switchTo();
    }
    getBy(locator, timeout, message) {
        if (this.webDriver)
            return this.webDriver.wait(selenium_webdriver_1.until.elementLocated(locator), timeout, message);
        this.error_ = "no valid connection";
        throw this.error_;
    }
    getByNativeAccessibilityId(id, timeout, message) {
        return this.getBy(by2_1.By2.nativeAccessibilityId(id), timeout, message);
    }
    getByNativeName(name, timeout, message) {
        return this.getBy(by2_1.By2.nativeName(name), timeout, message);
    }
    getByNativeId(id, timeout, message) {
        return this.getBy(by2_1.By2.nativeId(id), timeout, message);
    }
    getByNativeclassName(className, timeout, message) {
        return this.getBy(by2_1.By2.nativeClassName(className), timeout, message);
    }
    seleniumDriver() {
        if (this.webDriver)
            return this.webDriver;
        throw new Error("no valid connection");
    }
    lastError() {
        return this.error_;
    }
    attach(webDriver) {
        this.webDriver = webDriver;
    }
    detach() {
        this.webDriver = undefined;
    }
    start() {
        return new Promise((resolve, reject) => {
            if (this.capabilities_) {
                new selenium_webdriver_1.Builder()
                    .usingServer(this.url_)
                    .withCapabilities(this.capabilities_)
                    .build()
                    .then(driver => { this.webDriver = driver; resolve(); })
                    .catch(e => { this.error_ = e; reject(e); });
            }
            else {
                reject("capabilities is not set");
            }
        });
    }
    stop() {
        return new Promise((resolve, reject) => {
            this.webDriver && this.webDriver
                .quit()
                .then(() => resolve())
                .catch(e => { this.error_ = e; reject(e); });
            resolve();
        });
    }
    restart() {
        return this._restart();
    }
    _restart() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.stop().then().catch(); //ignore stop error
            yield this.start();
        });
    }
    constructor(capabilities, url) {
        this.capabilities_ = capabilities;
        this.url_ = url ? url : "http://localhost:4723/wd/hub";
    }
    isActive() {
        return new Promise(resolve => {
            this.webDriver && this.webDriver
                .getSession()
                .then(() => resolve(true), reason => resolve(false));
            resolve(false);
        });
    }
}
exports.WebDriver2 = WebDriver2;
function createWebDriver2(capabilities, url) {
    return new WebDriver2(capabilities, url);
}
exports.createWebDriver2 = createWebDriver2;
//# sourceMappingURL=webdriver2.js.map
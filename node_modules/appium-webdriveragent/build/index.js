"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkForDependencies = checkForDependencies;
exports.retrieveBuildDir = retrieveBuildDir;
exports.bundleWDASim = bundleWDASim;
exports.PROJECT_FILE = exports.WDA_RUNNER_BUNDLE_ID = exports.WDA_BUNDLE_ID = exports.BOOTSTRAP_PATH = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _nodeSimctl = require("node-simctl");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _os = require("os");

var _utils = require("./lib/utils");

const log = _appiumSupport.logger.getLogger('WebDriverAgent');

const execLogger = {
  logNonEmptyLines(data, fn) {
    data = Buffer.isBuffer(data) ? data.toString() : data;

    for (const line of data.split(_os.EOL)) {
      if (line) {
        fn(line);
      }
    }
  },

  debug(data) {
    this.logNonEmptyLines(data, log.debug.bind(log));
  },

  error(data) {
    this.logNonEmptyLines(data, log.error.bind(log));
  }

};
const IOS = 'iOS';
const TVOS = 'tvOS';
const CARTHAGE_CMD = 'carthage';
const CARTFILE = 'Cartfile.resolved';
const CARTHAGE_ROOT = 'Carthage';
const BOOTSTRAP_PATH = __dirname.endsWith('build') ? _path.default.resolve(__dirname, '..') : __dirname;
exports.BOOTSTRAP_PATH = BOOTSTRAP_PATH;
const WDA_BUNDLE_ID = 'com.apple.test.WebDriverAgentRunner-Runner';
exports.WDA_BUNDLE_ID = WDA_BUNDLE_ID;

const WEBDRIVERAGENT_PROJECT = _path.default.join(BOOTSTRAP_PATH, 'WebDriverAgent.xcodeproj');

const WDA_RUNNER_BUNDLE_ID = 'com.facebook.WebDriverAgentRunner';
exports.WDA_RUNNER_BUNDLE_ID = WDA_RUNNER_BUNDLE_ID;
const PROJECT_FILE = 'project.pbxproj';
exports.PROJECT_FILE = PROJECT_FILE;
let buildDirPath;

async function hasTvOSSims() {
  const devices = _lodash.default.flatten(Object.values((await (0, _nodeSimctl.getDevices)(null, TVOS))));

  return !_lodash.default.isEmpty(devices);
}

function getCartfileLocations() {
  const cartfile = _path.default.resolve(BOOTSTRAP_PATH, CARTFILE);

  const installedCartfile = _path.default.resolve(BOOTSTRAP_PATH, CARTHAGE_ROOT, CARTFILE);

  return {
    cartfile,
    installedCartfile
  };
}

async function needsUpdate(cartfile, installedCartfile) {
  return !(await (0, _utils.fileCompare)(cartfile, installedCartfile));
}

async function fetchDependencies(useSsl = false) {
  log.info('Fetching dependencies');

  if (!(await _appiumSupport.fs.which(CARTHAGE_CMD))) {
    log.errorAndThrow('Please make sure that you have Carthage installed (https://github.com/Carthage/Carthage)');
  }

  const {
    cartfile,
    installedCartfile
  } = getCartfileLocations();

  if (!(await needsUpdate(cartfile, installedCartfile))) {
    log.info('Dependencies up-to-date');
    return false;
  }

  let platforms = [IOS];

  if (await hasTvOSSims()) {
    platforms.push(TVOS);
  } else {
    log.debug('tvOS platform will not be included into Carthage bootstrap, because no Simulator devices have been created for it');
  }

  log.info(`Installing/updating dependencies for platforms ${platforms.map(p => `'${p}'`).join(', ')}`);
  let args = ['bootstrap'];

  if (useSsl) {
    args.push('--use-ssh');
  }

  args.push('--platform', platforms.join(','));

  try {
    await (0, _teen_process.exec)(CARTHAGE_CMD, args, {
      logger: execLogger,
      cwd: BOOTSTRAP_PATH
    });
  } catch (err) {
    await _appiumSupport.fs.rimraf(_path.default.resolve(BOOTSTRAP_PATH, CARTHAGE_ROOT));
    throw err;
  }

  await _appiumSupport.fs.copyFile(cartfile, installedCartfile);
  log.debug(`Finished fetching dependencies`);
  return true;
}

async function buildWDASim() {
  await (0, _teen_process.exec)('xcodebuild', ['-project', WEBDRIVERAGENT_PROJECT, '-scheme', 'WebDriverAgentRunner', '-sdk', 'iphonesimulator', 'CODE_SIGN_IDENTITY=""', 'CODE_SIGNING_REQUIRED="NO"']);
}

async function retrieveBuildDir() {
  if (buildDirPath) {
    return buildDirPath;
  }

  const {
    stdout
  } = await (0, _teen_process.exec)('xcodebuild', ['-project', WEBDRIVERAGENT_PROJECT, '-showBuildSettings']);
  const pattern = /^\s*BUILD_DIR\s+=\s+(\/.*)/m;
  const match = pattern.exec(stdout);

  if (!match) {
    throw new Error(`Cannot parse WDA build dir from ${_lodash.default.truncate(stdout, {
      length: 300
    })}`);
  }

  buildDirPath = match[1];
  log.debug(`Got build folder: '${buildDirPath}'`);
  return buildDirPath;
}

async function checkForDependencies(opts = {}) {
  return await fetchDependencies(opts.useSsl);
}

async function bundleWDASim(opts) {
  const derivedDataPath = await retrieveBuildDir();

  const wdaBundlePath = _path.default.join(derivedDataPath, 'Debug-iphonesimulator', 'WebDriverAgentRunner-Runner.app');

  if (await _appiumSupport.fs.exists(wdaBundlePath)) {
    return wdaBundlePath;
  }

  await checkForDependencies(opts);
  await buildWDASim();
  return wdaBundlePath;
}

if (require.main === module) {
  (0, _asyncbox.asyncify)(checkForDependencies);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImxvZyIsImxvZ2dlciIsImdldExvZ2dlciIsImV4ZWNMb2dnZXIiLCJsb2dOb25FbXB0eUxpbmVzIiwiZGF0YSIsImZuIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsImxpbmUiLCJzcGxpdCIsIkVPTCIsImRlYnVnIiwiYmluZCIsImVycm9yIiwiSU9TIiwiVFZPUyIsIkNBUlRIQUdFX0NNRCIsIkNBUlRGSUxFIiwiQ0FSVEhBR0VfUk9PVCIsIkJPT1RTVFJBUF9QQVRIIiwiX19kaXJuYW1lIiwiZW5kc1dpdGgiLCJwYXRoIiwicmVzb2x2ZSIsIldEQV9CVU5ETEVfSUQiLCJXRUJEUklWRVJBR0VOVF9QUk9KRUNUIiwiam9pbiIsIldEQV9SVU5ORVJfQlVORExFX0lEIiwiUFJPSkVDVF9GSUxFIiwiYnVpbGREaXJQYXRoIiwiaGFzVHZPU1NpbXMiLCJkZXZpY2VzIiwiXyIsImZsYXR0ZW4iLCJPYmplY3QiLCJ2YWx1ZXMiLCJpc0VtcHR5IiwiZ2V0Q2FydGZpbGVMb2NhdGlvbnMiLCJjYXJ0ZmlsZSIsImluc3RhbGxlZENhcnRmaWxlIiwibmVlZHNVcGRhdGUiLCJmZXRjaERlcGVuZGVuY2llcyIsInVzZVNzbCIsImluZm8iLCJmcyIsIndoaWNoIiwiZXJyb3JBbmRUaHJvdyIsInBsYXRmb3JtcyIsInB1c2giLCJtYXAiLCJwIiwiYXJncyIsImN3ZCIsImVyciIsInJpbXJhZiIsImNvcHlGaWxlIiwiYnVpbGRXREFTaW0iLCJyZXRyaWV2ZUJ1aWxkRGlyIiwic3Rkb3V0IiwicGF0dGVybiIsIm1hdGNoIiwiZXhlYyIsIkVycm9yIiwidHJ1bmNhdGUiLCJsZW5ndGgiLCJjaGVja0ZvckRlcGVuZGVuY2llcyIsIm9wdHMiLCJidW5kbGVXREFTaW0iLCJkZXJpdmVkRGF0YVBhdGgiLCJ3ZGFCdW5kbGVQYXRoIiwiZXhpc3RzIiwicmVxdWlyZSIsIm1haW4iLCJtb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7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NUMsRUFBZ0Q7QUFDOUMsU0FBTyxNQUFNekIsaUJBQWlCLENBQUN5QixJQUFJLENBQUN4QixNQUFOLENBQTlCO0FBQ0Q7O0FBRUQsZUFBZXlCLFlBQWYsQ0FBNkJELElBQTdCLEVBQW1DO0FBQ2pDLFFBQU1FLGVBQWUsR0FBRyxNQUFNWCxnQkFBZ0IsRUFBOUM7O0FBQ0EsUUFBTVksYUFBYSxHQUFHL0MsY0FBS0ksSUFBTCxDQUFVMEMsZUFBVixFQUEyQix1QkFBM0IsRUFBb0QsaUNBQXBELENBQXRCOztBQUNBLE1BQUksTUFBTXhCLGtCQUFHMEIsTUFBSCxDQUFVRCxhQUFWLENBQVYsRUFBb0M7QUFDbEMsV0FBT0EsYUFBUDtBQUNEOztBQUNELFFBQU1KLG9CQUFvQixDQUFDQyxJQUFELENBQTFCO0FBQ0EsUUFBTVYsV0FBVyxFQUFqQjtBQUNBLFNBQU9hLGFBQVA7QUFDRDs7QUFFRCxJQUFJRSxPQUFPLENBQUNDLElBQVIsS0FBaUJDLE1BQXJCLEVBQTZCO0FBQzNCLDBCQUFTUixvQkFBVDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnMsIGxvZ2dlciB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IGdldERldmljZXMgfSBmcm9tICdub2RlLXNpbWN0bCc7XG5pbXBvcnQgeyBhc3luY2lmeSB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnO1xuaW1wb3J0IHsgZmlsZUNvbXBhcmUgfSBmcm9tICcuL2xpYi91dGlscyc7XG5cblxuY29uc3QgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignV2ViRHJpdmVyQWdlbnQnKTtcbmNvbnN0IGV4ZWNMb2dnZXIgPSB7XG4gIC8vIGxvZ2dlciB0aGF0IGdldHMgcmlkIG9mIGVtcHR5IGxpbmVzXG4gIGxvZ05vbkVtcHR5TGluZXMgKGRhdGEsIGZuKSB7XG4gICAgZGF0YSA9IEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSA/IGRhdGEudG9TdHJpbmcoKSA6IGRhdGE7XG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGRhdGEuc3BsaXQoRU9MKSkge1xuICAgICAgaWYgKGxpbmUpIHtcbiAgICAgICAgZm4obGluZSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBkZWJ1ZyAoZGF0YSkge1xuICAgIHRoaXMubG9nTm9uRW1wdHlMaW5lcyhkYXRhLCBsb2cuZGVidWcuYmluZChsb2cpKTtcbiAgfSxcbiAgZXJyb3IgKGRhdGEpIHtcbiAgICB0aGlzLmxvZ05vbkVtcHR5TGluZXMoZGF0YSwgbG9nLmVycm9yLmJpbmQobG9nKSk7XG4gIH0sXG59O1xuXG5jb25zdCBJT1MgPSAnaU9TJztcbmNvbnN0IFRWT1MgPSAndHZPUyc7XG5cbmNvbnN0IENBUlRIQUdFX0NNRCA9ICdjYXJ0aGFnZSc7XG5jb25zdCBDQVJURklMRSA9ICdDYXJ0ZmlsZS5yZXNvbHZlZCc7XG5jb25zdCBDQVJUSEFHRV9ST09UID0gJ0NhcnRoYWdlJztcblxuY29uc3QgQk9PVFNUUkFQX1BBVEggPSBfX2Rpcm5hbWUuZW5kc1dpdGgoJ2J1aWxkJylcbiAgPyBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nKVxuICA6IF9fZGlybmFtZTtcbmNvbnN0IFdEQV9CVU5ETEVfSUQgPSAnY29tLmFwcGxlLnRlc3QuV2ViRHJpdmVyQWdlbnRSdW5uZXItUnVubmVyJztcbmNvbnN0IFdFQkRSSVZFUkFHRU5UX1BST0pFQ1QgPSBwYXRoLmpvaW4oQk9PVFNUUkFQX1BBVEgsICdXZWJEcml2ZXJBZ2VudC54Y29kZXByb2onKTtcbmNvbnN0IFdEQV9SVU5ORVJfQlVORExFX0lEID0gJ2NvbS5mYWNlYm9vay5XZWJEcml2ZXJBZ2VudFJ1bm5lcic7XG5jb25zdCBQUk9KRUNUX0ZJTEUgPSAncHJvamVjdC5wYnhwcm9qJztcblxubGV0IGJ1aWxkRGlyUGF0aDtcblxuYXN5bmMgZnVuY3Rpb24gaGFzVHZPU1NpbXMgKCkge1xuICBjb25zdCBkZXZpY2VzID0gXy5mbGF0dGVuKE9iamVjdC52YWx1ZXMoYXdhaXQgZ2V0RGV2aWNlcyhudWxsLCBUVk9TKSkpO1xuICByZXR1cm4gIV8uaXNFbXB0eShkZXZpY2VzKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2FydGZpbGVMb2NhdGlvbnMgKCkge1xuICBjb25zdCBjYXJ0ZmlsZSA9IHBhdGgucmVzb2x2ZShCT09UU1RSQVBfUEFUSCwgQ0FSVEZJTEUpO1xuICBjb25zdCBpbnN0YWxsZWRDYXJ0ZmlsZSA9IHBhdGgucmVzb2x2ZShCT09UU1RSQVBfUEFUSCwgQ0FSVEhBR0VfUk9PVCwgQ0FSVEZJTEUpO1xuXG4gIHJldHVybiB7XG4gICAgY2FydGZpbGUsXG4gICAgaW5zdGFsbGVkQ2FydGZpbGUsXG4gIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG5lZWRzVXBkYXRlIChjYXJ0ZmlsZSwgaW5zdGFsbGVkQ2FydGZpbGUpIHtcbiAgcmV0dXJuICFhd2FpdCBmaWxlQ29tcGFyZShjYXJ0ZmlsZSwgaW5zdGFsbGVkQ2FydGZpbGUpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBmZXRjaERlcGVuZGVuY2llcyAodXNlU3NsID0gZmFsc2UpIHtcbiAgbG9nLmluZm8oJ0ZldGNoaW5nIGRlcGVuZGVuY2llcycpO1xuICBpZiAoIWF3YWl0IGZzLndoaWNoKENBUlRIQUdFX0NNRCkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdygnUGxlYXNlIG1ha2Ugc3VyZSB0aGF0IHlvdSBoYXZlIENhcnRoYWdlIGluc3RhbGxlZCAoaHR0cHM6Ly9naXRodWIuY29tL0NhcnRoYWdlL0NhcnRoYWdlKScpO1xuICB9XG5cbiAgLy8gY2hlY2sgdGhhdCB0aGUgZGVwZW5kZW5jaWVzIGRvIG5vdCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgY29uc3Qge1xuICAgIGNhcnRmaWxlLFxuICAgIGluc3RhbGxlZENhcnRmaWxlLFxuICB9ID0gZ2V0Q2FydGZpbGVMb2NhdGlvbnMoKTtcblxuICBpZiAoIWF3YWl0IG5lZWRzVXBkYXRlKGNhcnRmaWxlLCBpbnN0YWxsZWRDYXJ0ZmlsZSkpIHtcbiAgICAvLyBmaWxlcyBhcmUgaWRlbnRpY2FsXG4gICAgbG9nLmluZm8oJ0RlcGVuZGVuY2llcyB1cC10by1kYXRlJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbGV0IHBsYXRmb3JtcyA9IFtJT1NdO1xuICBpZiAoYXdhaXQgaGFzVHZPU1NpbXMoKSkge1xuICAgIHBsYXRmb3Jtcy5wdXNoKFRWT1MpO1xuICB9IGVsc2Uge1xuICAgIGxvZy5kZWJ1ZygndHZPUyBwbGF0Zm9ybSB3aWxsIG5vdCBiZSBpbmNsdWRlZCBpbnRvIENhcnRoYWdlIGJvb3RzdHJhcCwgYmVjYXVzZSBubyBTaW11bGF0b3IgZGV2aWNlcyBoYXZlIGJlZW4gY3JlYXRlZCBmb3IgaXQnKTtcbiAgfVxuXG4gIGxvZy5pbmZvKGBJbnN0YWxsaW5nL3VwZGF0aW5nIGRlcGVuZGVuY2llcyBmb3IgcGxhdGZvcm1zICR7cGxhdGZvcm1zLm1hcCgocCkgPT4gYCcke3B9J2ApLmpvaW4oJywgJyl9YCk7XG5cbiAgbGV0IGFyZ3MgPSBbJ2Jvb3RzdHJhcCddO1xuICBpZiAodXNlU3NsKSB7XG4gICAgYXJncy5wdXNoKCctLXVzZS1zc2gnKTtcbiAgfVxuICBhcmdzLnB1c2goJy0tcGxhdGZvcm0nLCBwbGF0Zm9ybXMuam9pbignLCcpKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBleGVjKENBUlRIQUdFX0NNRCwgYXJncywge1xuICAgICAgbG9nZ2VyOiBleGVjTG9nZ2VyLFxuICAgICAgY3dkOiBCT09UU1RSQVBfUEFUSCxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gcmVtb3ZlIHRoZSBjYXJ0aGFnZSBkaXJlY3RvcnksIG9yIGVsc2Ugc3Vic2VxdWVudCBydW5zIHdpbGwgc2VlIGl0IGFuZFxuICAgIC8vIGFzc3VtZSB0aGUgZGVwZW5kZW5jaWVzIGFyZSBhbHJlYWR5IGRvd25sb2FkZWRcbiAgICBhd2FpdCBmcy5yaW1yYWYocGF0aC5yZXNvbHZlKEJPT1RTVFJBUF9QQVRILCBDQVJUSEFHRV9ST09UKSk7XG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgLy8gcHV0IHRoZSByZXNvbHZlZCBjYXJ0ZmlsZSBpbnRvIHRoZSBDYXJ0aGFnZSBkaXJlY3RvcnlcbiAgYXdhaXQgZnMuY29weUZpbGUoY2FydGZpbGUsIGluc3RhbGxlZENhcnRmaWxlKTtcblxuICBsb2cuZGVidWcoYEZpbmlzaGVkIGZldGNoaW5nIGRlcGVuZGVuY2llc2ApO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gYnVpbGRXREFTaW0gKCkge1xuICBhd2FpdCBleGVjKCd4Y29kZWJ1aWxkJywgWyctcHJvamVjdCcsIFdFQkRSSVZFUkFHRU5UX1BST0pFQ1QsICctc2NoZW1lJywgJ1dlYkRyaXZlckFnZW50UnVubmVyJywgJy1zZGsnLCAnaXBob25lc2ltdWxhdG9yJywgJ0NPREVfU0lHTl9JREVOVElUWT1cIlwiJywgJ0NPREVfU0lHTklOR19SRVFVSVJFRD1cIk5PXCInXSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJldHJpZXZlQnVpbGREaXIgKCkge1xuICBpZiAoYnVpbGREaXJQYXRoKSB7XG4gICAgcmV0dXJuIGJ1aWxkRGlyUGF0aDtcbiAgfVxuXG4gIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygneGNvZGVidWlsZCcsIFsnLXByb2plY3QnLCBXRUJEUklWRVJBR0VOVF9QUk9KRUNULCAnLXNob3dCdWlsZFNldHRpbmdzJ10pO1xuXG4gIGNvbnN0IHBhdHRlcm4gPSAvXlxccypCVUlMRF9ESVJcXHMrPVxccysoXFwvLiopL207XG4gIGNvbnN0IG1hdGNoID0gcGF0dGVybi5leGVjKHN0ZG91dCk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBwYXJzZSBXREEgYnVpbGQgZGlyIGZyb20gJHtfLnRydW5jYXRlKHN0ZG91dCwge2xlbmd0aDogMzAwfSl9YCk7XG4gIH1cbiAgYnVpbGREaXJQYXRoID0gbWF0Y2hbMV07XG4gIGxvZy5kZWJ1ZyhgR290IGJ1aWxkIGZvbGRlcjogJyR7YnVpbGREaXJQYXRofSdgKTtcbiAgcmV0dXJuIGJ1aWxkRGlyUGF0aDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tGb3JEZXBlbmRlbmNpZXMgKG9wdHMgPSB7fSkge1xuICByZXR1cm4gYXdhaXQgZmV0Y2hEZXBlbmRlbmNpZXMob3B0cy51c2VTc2wpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBidW5kbGVXREFTaW0gKG9wdHMpIHtcbiAgY29uc3QgZGVyaXZlZERhdGFQYXRoID0gYXdhaXQgcmV0cmlldmVCdWlsZERpcigpO1xuICBjb25zdCB3ZGFCdW5kbGVQYXRoID0gcGF0aC5qb2luKGRlcml2ZWREYXRhUGF0aCwgJ0RlYnVnLWlwaG9uZXNpbXVsYXRvcicsICdXZWJEcml2ZXJBZ2VudFJ1bm5lci1SdW5uZXIuYXBwJyk7XG4gIGlmIChhd2FpdCBmcy5leGlzdHMod2RhQnVuZGxlUGF0aCkpIHtcbiAgICByZXR1cm4gd2RhQnVuZGxlUGF0aDtcbiAgfVxuICBhd2FpdCBjaGVja0ZvckRlcGVuZGVuY2llcyhvcHRzKTtcbiAgYXdhaXQgYnVpbGRXREFTaW0oKTtcbiAgcmV0dXJuIHdkYUJ1bmRsZVBhdGg7XG59XG5cbmlmIChyZXF1aXJlLm1haW4gPT09IG1vZHVsZSkge1xuICBhc3luY2lmeShjaGVja0ZvckRlcGVuZGVuY2llcyk7XG59XG5cbmV4cG9ydCB7XG4gIGNoZWNrRm9yRGVwZW5kZW5jaWVzLCByZXRyaWV2ZUJ1aWxkRGlyLFxuICBidW5kbGVXREFTaW0sXG4gIEJPT1RTVFJBUF9QQVRILCBXREFfQlVORExFX0lELFxuICBXREFfUlVOTkVSX0JVTkRMRV9JRCwgUFJPSkVDVF9GSUxFLFxufTtcbiJdLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4ifQ==

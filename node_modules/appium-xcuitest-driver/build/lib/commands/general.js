"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.extensions = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumIosDriver = require("appium-ios-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

var _moment = _interopRequireDefault(require("moment"));

var _appiumIosDevice = require("appium-ios-device");

let commands = {},
    helpers = {},
    extensions = {};
exports.extensions = extensions;
exports.helpers = helpers;
exports.commands = commands;
const MOMENT_FORMAT_ISO8601 = 'YYYY-MM-DDTHH:mm:ssZ';

commands.active = async function active() {
  if (this.isWebContext()) {
    return await this.executeAtom('active_element', []);
  }

  return await this.proxyCommand(`/element/active`, 'GET');
};

commands.background = async function background(seconds) {
  const homescreen = '/wda/homescreen';
  const deactivateApp = '/wda/deactivateApp';
  let endpoint;
  let params = {};

  const selectEndpoint = timeoutSeconds => {
    if (!_appiumSupport.util.hasValue(timeoutSeconds)) {
      endpoint = homescreen;
    } else if (!isNaN(timeoutSeconds)) {
      const duration = parseFloat(timeoutSeconds);

      if (duration >= 0) {
        params = {
          duration
        };
        endpoint = deactivateApp;
      } else {
        endpoint = homescreen;
      }
    }
  };

  if (_lodash.default.has(seconds, 'timeout')) {
    const {
      timeout
    } = seconds;
    selectEndpoint(isNaN(timeout) ? timeout : parseFloat(timeout) / 1000.0);
  } else {
    selectEndpoint(seconds);
  }

  if (!endpoint) {
    _logger.default.errorAndThrow(`Argument value is expected to be a valid number. ` + `${JSON.stringify(seconds)} has been provided instead`);
  }

  return await this.proxyCommand(endpoint, 'POST', params, endpoint !== homescreen);
};

commands.touchId = async function touchId(match = true) {
  await this.mobileSendBiometricMatch({
    match
  });
};

commands.toggleEnrollTouchId = async function toggleEnrollTouchId(isEnabled = true) {
  await this.mobileEnrollBiometric({
    isEnabled
  });
};

helpers.getWindowSizeWeb = async function getWindowSizeWeb() {
  return await this.executeAtom('get_window_size', []);
};

helpers.getWindowSizeNative = async function getWindowSizeNative() {
  return await this.proxyCommand(`/window/size`, 'GET');
};

commands.getWindowSize = async function getWindowSize(windowHandle = 'current') {
  if (windowHandle !== 'current') {
    throw new _appiumBaseDriver.errors.NotYetImplementedError('Currently only getting current window size is supported.');
  }

  if (!this.isWebContext()) {
    return await this.getWindowSizeNative();
  } else {
    return await this.getWindowSizeWeb();
  }
};

commands.getDeviceTime = async function getDeviceTime(format = MOMENT_FORMAT_ISO8601) {
  _logger.default.info('Attempting to capture iOS device date and time');

  if (this.isRealDevice()) {
    const {
      timestamp,
      utcOffset
    } = await _appiumIosDevice.utilities.getDeviceTime(this.opts.udid);
    return _moment.default.unix(timestamp).utcOffset(utcOffset).format(format);
  } else {
    return await _appiumIosDriver.iosCommands.general.getDeviceTime.call(this, format);
  }
};

commands.getWindowRect = async function getWindowRect() {
  const {
    width,
    height
  } = await this.getWindowSize();
  return {
    width,
    height,
    x: 0,
    y: 0
  };
};

commands.hideKeyboard = async function hideKeyboard(strategy, ...possibleKeys) {
  if (!(this.opts.deviceName || '').includes('iPhone')) {
    try {
      await this.proxyCommand('/wda/keyboard/dismiss', 'POST');
      return;
    } catch (ign) {}
  }

  _logger.default.debug('Cannot dismiss the keyboard using the native call. Trying to apply a workaround...');

  let keyboard;

  try {
    keyboard = await this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false);
  } catch (err) {
    _logger.default.debug('No keyboard found. Unable to hide.');

    return;
  }

  possibleKeys.pop();
  possibleKeys = possibleKeys.filter(element => !!element);

  if (possibleKeys.length) {
    for (const key of possibleKeys) {
      let el = _lodash.default.last((await this.findNativeElementOrElements('accessibility id', key, true, keyboard)));

      if (el) {
        _logger.default.debug(`Attempting to hide keyboard by pressing '${key}' key.`);

        await this.nativeClick(el);
        return;
      }
    }
  } else {
    _logger.default.debug('Finding keyboard and clicking final button to close');

    if ((await this.getNativeAttribute('visible', keyboard)) === 'false') {
      _logger.default.debug('No visible keyboard found. Returning');

      return;
    }

    let buttons = await this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, keyboard);

    if (_lodash.default.isEmpty(buttons)) {
      _logger.default.warn(`No button elements found. Unable to hide.`);

      return;
    }

    await this.nativeClick(_lodash.default.last(buttons));
  }
};

commands.getStrings = _appiumIosDriver.iosCommands.general.getStrings;

commands.removeApp = async function removeApp(bundleId) {
  return await this.mobileRemoveApp({
    bundleId
  });
};

commands.launchApp = _appiumIosDriver.iosCommands.general.launchApp;
commands.closeApp = _appiumIosDriver.iosCommands.general.closeApp;

commands.keys = async function keys(keys) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.UnknownError('Command should be proxied to WDA');
  }

  let el = _appiumSupport.util.unwrapElement((await this.active()));

  if (_lodash.default.isEmpty(el)) {
    throw new _appiumBaseDriver.errors.NoSuchElementError();
  }

  await this.setValue(keys, el);
};

commands.setUrl = async function setUrl(url) {
  if (!this.isWebContext() && this.isRealDevice()) {
    return await this.proxyCommand('/url', 'POST', {
      url
    });
  }

  return await _appiumIosDriver.iosCommands.general.setUrl.call(this, url);
};

commands.getViewportRect = _appiumIosDriver.iosCommands.device.getViewportRect;

commands.getScreenInfo = async function getScreenInfo() {
  return await this.proxyCommand('/wda/screen', 'GET');
};

commands.getStatusBarHeight = async function getStatusBarHeight() {
  const {
    statusBarSize
  } = await this.getScreenInfo();
  return statusBarSize.height;
};

commands.getDevicePixelRatio = async function getDevicePixelRatio() {
  const {
    scale
  } = await this.getScreenInfo();
  return scale;
};

commands.mobilePressButton = async function mobilePressButton(opts = {}) {
  const {
    name
  } = opts;

  if (!name) {
    _logger.default.errorAndThrow('Button name is mandatory');
  }

  return await this.proxyCommand('/wda/pressButton', 'POST', {
    name
  });
};

commands.mobileSiriCommand = async function mobileSiriCommand(opts = {}) {
  const {
    text
  } = opts;

  if (!_appiumSupport.util.hasValue(text)) {
    _logger.default.errorAndThrow('"text" argument is mandatory');
  }

  return await this.proxyCommand('/wda/siri/activate', 'POST', {
    text
  });
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJNT01FTlRfRk9STUFUX0lTTzg2MDEiLCJhY3RpdmUiLCJpc1dlYkNvbnRleHQiLCJleGVjdXRlQXRvbSIsInByb3h5Q29tbWFuZCIsImJhY2tncm91bmQiLCJzZWNvbmRzIiwiaG9tZXNjcmVlbiIsImRlYWN0aXZhdGVBcHAiLCJlbmRwb2ludCIsInBhcmFtcyIsInNlbGVjdEVuZHBvaW50IiwidGltZW91dFNlY29uZHMiLCJ1dGlsIiwiaGFzVmFsdWUiLCJpc05hTiIsImR1cmF0aW9uIiwicGFyc2VGbG9hdCIsIl8iLCJoYXMiLCJ0aW1lb3V0IiwibG9nIiwiZXJyb3JBbmRUaHJvdyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b3VjaElkIiwibWF0Y2giLCJtb2JpbGVTZW5kQmlvbWV0cmljTWF0Y2giLCJ0b2dnbGVFbnJvbGxUb3VjaElkIiwiaXNFbmFibGVkIiwibW9iaWxlRW5yb2xsQmlvbWV0cmljIiwiZ2V0V2luZG93U2l6ZVdlYiIsImdldFdpbmRvd1NpemVOYXRpdmUiLCJnZXRXaW5kb3dTaXplIiwid2luZG93SGFuZGxlIiwiZXJyb3JzIiwiTm90WWV0SW1wbGVtZW50ZWRFcnJvciIsImdldERldmljZVRpbWUiLCJmb3JtYXQiLCJpbmZvIiwiaXNSZWFsRGV2aWNlIiwidGltZXN0YW1wIiwidXRjT2Zmc2V0IiwidXRpbGl0aWVzIiwib3B0cyIsInVkaWQiLCJtb21lbnQiLCJ1bml4IiwiaW9zQ29tbWFuZHMiLCJnZW5lcmFsIiwiY2FsbCIsImdldFdpbmRvd1JlY3QiLCJ3aWR0aCIsImhlaWdodCIsIngiLCJ5IiwiaGlkZUtleWJvYXJkIiwic3RyYXRlZ3kiLCJwb3NzaWJsZUtleXMiLCJkZXZpY2VOYW1lIiwiaW5jbHVkZXMiLCJpZ24iLCJkZWJ1ZyIsImtleWJvYXJkIiwiZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzIiwiZXJyIiwicG9wIiwiZmlsdGVyIiwiZWxlbWVudCIsImxlbmd0aCIsImtleSIsImVsIiwibGFzdCIsIm5hdGl2ZUNsaWNrIiwiZ2V0TmF0aXZlQXR0cmlidXRlIiwiYnV0dG9ucyIsImlzRW1wdHkiLCJ3YXJuIiwiZ2V0U3RyaW5ncyIsInJlbW92ZUFwcCIsImJ1bmRsZUlkIiwibW9iaWxlUmVtb3ZlQXBwIiwibGF1bmNoQXBwIiwiY2xvc2VBcHAiLCJrZXlzIiwiVW5rbm93bkVycm9yIiwidW53cmFwRWxlbWVudCIsIk5vU3VjaEVsZW1lbnRFcnJvciIsInNldFZhbHVlIiwic2V0VXJsIiwidXJsIiwiZ2V0Vmlld3BvcnRSZWN0IiwiZGV2aWNlIiwiZ2V0U2NyZWVuSW5mbyIsImdldFN0YXR1c0JhckhlaWdodCIsInN0YXR1c0JhclNpemUiLCJnZXREZXZpY2VQaXhlbFJhdGlvIiwic2NhbGUiLCJtb2JpbGVQcmVzc0J1dHRvbiIsIm5hbWUiLCJtb2JpbGVTaXJpQ29tbWFuZCIsInRleHQiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBSUEsUUFBUSxHQUFHLEVBQWY7QUFBQSxJQUFtQkMsT0FBTyxHQUFHLEVBQTdCO0FBQUEsSUFBaUNDLFVBQVUsR0FBRyxFQUE5Qzs7OztBQUVBLE1BQU1DLHFCQUFxQixHQUFHLHNCQUE5Qjs7QUFFQUgsUUFBUSxDQUFDSSxNQUFULEdBQWtCLGVBQWVBLE1BQWYsR0FBeUI7QUFDekMsTUFBSSxLQUFLQyxZQUFMLEVBQUosRUFBeUI7QUFDdkIsV0FBTyxNQUFNLEtBQUtDLFdBQUwsQ0FBaUIsZ0JBQWpCLEVBQW1DLEVBQW5DLENBQWI7QUFDRDs7QUFDRCxTQUFPLE1BQU0sS0FBS0MsWUFBTCxDQUFtQixpQkFBbkIsRUFBcUMsS0FBckMsQ0FBYjtBQUNELENBTEQ7O0FBa0JBUCxRQUFRLENBQUNRLFVBQVQsR0FBc0IsZUFBZUEsVUFBZixDQUEy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QUNUOUUsb0JBQUlDLGFBQUosQ0FBa0IsMEJBQWxCO0FBQ0Q7O0FBQ0QsU0FBTyxNQUFNLEtBQUtsQixZQUFMLENBQWtCLGtCQUFsQixFQUFzQyxNQUF0QyxFQUE4QztBQUFDK0YsSUFBQUE7QUFBRCxHQUE5QyxDQUFiO0FBQ0QsQ0FORDs7QUFRQXRHLFFBQVEsQ0FBQ3VHLGlCQUFULEdBQTZCLGVBQWVBLGlCQUFmLENBQWtDeEQsSUFBSSxHQUFHLEVBQXpDLEVBQTZDO0FBQ3hFLFFBQU07QUFBQ3lELElBQUFBO0FBQUQsTUFBU3pELElBQWY7O0FBQ0EsTUFBSSxDQUFDL0Isb0JBQUtDLFFBQUwsQ0FBY3VGLElBQWQsQ0FBTCxFQUEwQjtBQUN4QmhGLG9CQUFJQyxhQUFKLENBQWtCLDhCQUFsQjtBQUNEOztBQUNELFNBQU8sTUFBTSxLQUFLbEIsWUFBTCxDQUFrQixvQkFBbEIsRUFBd0MsTUFBeEMsRUFBZ0Q7QUFBQ2lHLElBQUFBO0FBQUQsR0FBaEQsQ0FBYjtBQUNELENBTkQ7O0FBUUFDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjeEcsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBR2VDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCB7IGlvc0NvbW1hbmRzIH0gZnJvbSAnYXBwaXVtLWlvcy1kcml2ZXInO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IHV0aWxpdGllcyB9IGZyb20gJ2FwcGl1bS1pb3MtZGV2aWNlJztcblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb25zdCBNT01FTlRfRk9STUFUX0lTTzg2MDEgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuXG5jb21tYW5kcy5hY3RpdmUgPSBhc3luYyBmdW5jdGlvbiBhY3RpdmUgKCkge1xuICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdhY3RpdmVfZWxlbWVudCcsIFtdKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC9lbGVtZW50L2FjdGl2ZWAsICdHRVQnKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgYXBwIChzaW11bGF0ZSBkZXZpY2UgaG9tZSBidXR0b24pLiBJdCBpcyBwb3NzaWJsZSB0byByZXN0b3JlXG4gKiB0aGUgYXBwIGFmdGVyIHRoZSB0aW1lb3V0IG9yIGtlZXAgaXQgbWluaW1pemVkIGJhc2VkIG9uIHRoZSBwYXJhbWV0ZXIgdmFsdWUuXG4gKlxuICogQHBhcmFtIHs/bnVtYmVyfE9iamVjdH0gc2Vjb25kc1xuICogLSBhbnkgcG9zaXRpdmUgbnVtYmVyIG9mIHNlY29uZHM6IGNvbWUgYmFjayBhZnRlciBYIHNlY29uZHNcbiAqIC0gYW55IG5lZ2F0aXZlIG51bWJlciBvZiBzZWNvbmRzIG9yIHplcm86IG5ldmVyIGNvbWUgYmFja1xuICogLSB1bmRlZmluZWQvbnVsbDogbmV2ZXIgY29tZSBiYWNrXG4gKiAtIHt0aW1lb3V0OiA1MDAwfTogY29tZSBiYWNrIGFmdGVyIDUgc2Vjb25kc1xuICogLSB7dGltZW91dDogbnVsbH0sIHt0aW1lb3V0OiAtMn06IG5ldmVyIGNvbWUgYmFja1xuICovXG5jb21tYW5kcy5iYWNrZ3JvdW5kID0gYXN5bmMgZnVuY3Rpb24gYmFja2dyb3VuZCAoc2Vjb25kcykge1xuICBjb25zdCBob21lc2NyZWVuID0gJy93ZGEvaG9tZXNjcmVlbic7XG4gIGNvbnN0IGRlYWN0aXZhdGVBcHAgPSAnL3dkYS9kZWFjdGl2YXRlQXBwJztcblxuICBsZXQgZW5kcG9pbnQ7XG4gIGxldCBwYXJhbXMgPSB7fTtcbiAgY29uc3Qgc2VsZWN0RW5kcG9pbnQgPSAodGltZW91dFNlY29uZHMpID0+IHtcbiAgICBpZiAoIXV0aWwuaGFzVmFsdWUodGltZW91dFNlY29uZHMpKSB7XG4gICAgICBlbmRwb2ludCA9IGhvbWVzY3JlZW47XG4gICAgfSBlbHNlIGlmICghaXNOYU4odGltZW91dFNlY29uZHMpKSB7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IHBhcnNlRmxvYXQodGltZW91dFNlY29uZHMpO1xuICAgICAgaWYgKGR1cmF0aW9uID49IDApIHtcbiAgICAgICAgcGFyYW1zID0ge2R1cmF0aW9ufTtcbiAgICAgICAgZW5kcG9pbnQgPSBkZWFjdGl2YXRlQXBwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kcG9pbnQgPSBob21lc2NyZWVuO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgaWYgKF8uaGFzKHNlY29uZHMsICd0aW1lb3V0JykpIHtcbiAgICBjb25zdCB7dGltZW91dH0gPSBzZWNvbmRzO1xuICAgIHNlbGVjdEVuZHBvaW50KGlzTmFOKHRpbWVvdXQpID8gdGltZW91dCA6IHBhcnNlRmxvYXQodGltZW91dCkgLyAxMDAwLjApO1xuICB9IGVsc2Uge1xuICAgIHNlbGVjdEVuZHBvaW50KHNlY29uZHMpO1xuICB9XG4gIGlmICghZW5kcG9pbnQpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQXJndW1lbnQgdmFsdWUgaXMgZXhwZWN0ZWQgdG8gYmUgYSB2YWxpZCBudW1iZXIuIGAgK1xuICAgICAgYCR7SlNPTi5zdHJpbmdpZnkoc2Vjb25kcyl9IGhhcyBiZWVuIHByb3ZpZGVkIGluc3RlYWRgKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoZW5kcG9pbnQsICdQT1NUJywgcGFyYW1zLCBlbmRwb2ludCAhPT0gaG9tZXNjcmVlbik7XG59O1xuXG5jb21tYW5kcy50b3VjaElkID0gYXN5bmMgZnVuY3Rpb24gdG91Y2hJZCAobWF0Y2ggPSB0cnVlKSB7XG4gIGF3YWl0IHRoaXMubW9iaWxlU2VuZEJpb21ldHJpY01hdGNoKHttYXRjaH0pO1xufTtcblxuY29tbWFuZHMudG9nZ2xlRW5yb2xsVG91Y2hJZCA9IGFzeW5jIGZ1bmN0aW9uIHRvZ2dsZUVucm9sbFRvdWNoSWQgKGlzRW5hYmxlZCA9IHRydWUpIHtcbiAgYXdhaXQgdGhpcy5tb2JpbGVFbnJvbGxCaW9tZXRyaWMoe2lzRW5hYmxlZH0pO1xufTtcblxuaGVscGVycy5nZXRXaW5kb3dTaXplV2ViID0gYXN5bmMgZnVuY3Rpb24gZ2V0V2luZG93U2l6ZVdlYiAoKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdnZXRfd2luZG93X3NpemUnLCBbXSk7XG59O1xuXG5oZWxwZXJzLmdldFdpbmRvd1NpemVOYXRpdmUgPSBhc3luYyBmdW5jdGlvbiBnZXRXaW5kb3dTaXplTmF0aXZlICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvd2luZG93L3NpemVgLCAnR0VUJyk7XG59O1xuXG5jb21tYW5kcy5nZXRXaW5kb3dTaXplID0gYXN5bmMgZnVuY3Rpb24gZ2V0V2luZG93U2l6ZSAod2luZG93SGFuZGxlID0gJ2N1cnJlbnQnKSB7XG4gIGlmICh3aW5kb3dIYW5kbGUgIT09ICdjdXJyZW50Jykge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm90WWV0SW1wbGVtZW50ZWRFcnJvcignQ3VycmVudGx5IG9ubHkgZ2V0dGluZyBjdXJyZW50IHdpbmRvdyBzaXplIGlzIHN1cHBvcnRlZC4nKTtcbiAgfVxuXG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmdldFdpbmRvd1NpemVOYXRpdmUoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRXaW5kb3dTaXplV2ViKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSBjdXJyZW50IGRldmljZSdzIHRpbWVzdGFtcC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IC0gVGhlIHNldCBvZiBmb3JtYXQgc3BlY2lmaWVycy4gUmVhZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vbW9tZW50anMuY29tL2RvY3MvIHRvIGdldCB0aGUgZnVsbCBsaXN0IG9mIHN1cHBvcnRlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0aW1lIGZvcm1hdCBzcGVjaWZpZXJzLiBUaGUgZGVmYXVsdCBmb3JtYXQgaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBgWVlZWS1NTS1ERFRISDptbTpzc1pgLCB3aGljaCBjb21wbGllcyB0byBJU08tODYwMVxuICogQHJldHVybnMgRm9ybWF0dGVkIGRhdGV0aW1lIHN0cmluZyBvciB0aGUgcmF3IGNvbW1hbmQgb3V0cHV0IGlmIGZvcm1hdHRpbmcgZmFpbHNcbiAqL1xuY29tbWFuZHMuZ2V0RGV2aWNlVGltZSA9IGFzeW5jIGZ1bmN0aW9uIGdldERldmljZVRpbWUgKGZvcm1hdCA9IE1PTUVOVF9GT1JNQVRfSVNPODYwMSkge1xuICBsb2cuaW5mbygnQXR0ZW1wdGluZyB0byBjYXB0dXJlIGlPUyBkZXZpY2UgZGF0ZSBhbmQgdGltZScpO1xuICBpZiAodGhpcy5pc1JlYWxEZXZpY2UoKSkge1xuICAgIGNvbnN0IHsgdGltZXN0YW1wLCB1dGNPZmZzZXQgfSA9IGF3YWl0IHV0aWxpdGllcy5nZXREZXZpY2VUaW1lKHRoaXMub3B0cy51ZGlkKTtcbiAgICByZXR1cm4gbW9tZW50LnVuaXgodGltZXN0YW1wKS51dGNPZmZzZXQodXRjT2Zmc2V0KS5mb3JtYXQoZm9ybWF0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYXdhaXQgaW9zQ29tbWFuZHMuZ2VuZXJhbC5nZXREZXZpY2VUaW1lLmNhbGwodGhpcywgZm9ybWF0KTtcbiAgfVxufTtcblxuLy8gRm9yIFczQ1xuY29tbWFuZHMuZ2V0V2luZG93UmVjdCA9IGFzeW5jIGZ1bmN0aW9uIGdldFdpbmRvd1JlY3QgKCkge1xuICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSBhd2FpdCB0aGlzLmdldFdpbmRvd1NpemUoKTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG59O1xuXG5jb21tYW5kcy5oaWRlS2V5Ym9hcmQgPSBhc3luYyBmdW5jdGlvbiBoaWRlS2V5Ym9hcmQgKHN0cmF0ZWd5LCAuLi5wb3NzaWJsZUtleXMpIHtcbiAgaWYgKCEodGhpcy5vcHRzLmRldmljZU5hbWUgfHwgJycpLmluY2x1ZGVzKCdpUGhvbmUnKSkge1xuICAgIC8vIFRPRE86IG9uY2UgV0RBIGNhbiBoYW5kbGUgZGlzbWlzc2luZyBrZXlib2FyZCBmb3IgaXBob25lLCB0YWtlIGF3YXkgY29uZGl0aW9uYWxcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEva2V5Ym9hcmQvZGlzbWlzcycsICdQT1NUJyk7XG4gICAgICByZXR1cm47XG4gICAgfSBjYXRjaCAoaWduKSB7fVxuICB9XG5cbiAgbG9nLmRlYnVnKCdDYW5ub3QgZGlzbWlzcyB0aGUga2V5Ym9hcmQgdXNpbmcgdGhlIG5hdGl2ZSBjYWxsLiBUcnlpbmcgdG8gYXBwbHkgYSB3b3JrYXJvdW5kLi4uJyk7XG5cbiAgbGV0IGtleWJvYXJkO1xuICB0cnkge1xuICAgIGtleWJvYXJkID0gYXdhaXQgdGhpcy5maW5kTmF0aXZlRWxlbWVudE9yRWxlbWVudHMoJ2NsYXNzIG5hbWUnLCAnWENVSUVsZW1lbnRUeXBlS2V5Ym9hcmQnLCBmYWxzZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIG5vIGtleWJvYXJkIGZvdW5kXG4gICAgbG9nLmRlYnVnKCdObyBrZXlib2FyZCBmb3VuZC4gVW5hYmxlIHRvIGhpZGUuJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHBvc3NpYmxlS2V5cy5wb3AoKTsgLy8gbGFzdCBwYXJhbWV0ZXIgaXMgdGhlIHNlc3Npb24gaWRcbiAgcG9zc2libGVLZXlzID0gcG9zc2libGVLZXlzLmZpbHRlcigoZWxlbWVudCkgPT4gISFlbGVtZW50KTsgLy8gZ2V0IHJpZCBvZiB1bmRlZmluZWQgZWxlbWVudHNcbiAgaWYgKHBvc3NpYmxlS2V5cy5sZW5ndGgpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBwb3NzaWJsZUtleXMpIHtcbiAgICAgIGxldCBlbCA9IF8ubGFzdChhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnYWNjZXNzaWJpbGl0eSBpZCcsIGtleSwgdHJ1ZSwga2V5Ym9hcmQpKTtcbiAgICAgIGlmIChlbCkge1xuICAgICAgICBsb2cuZGVidWcoYEF0dGVtcHRpbmcgdG8gaGlkZSBrZXlib2FyZCBieSBwcmVzc2luZyAnJHtrZXl9JyBrZXkuYCk7XG4gICAgICAgIGF3YWl0IHRoaXMubmF0aXZlQ2xpY2soZWwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGZpbmQgdGhlIGtleWJvYXJkLCBhbmQgaGl0IHRoZSBsYXN0IEJ1dHRvblxuICAgIGxvZy5kZWJ1ZygnRmluZGluZyBrZXlib2FyZCBhbmQgY2xpY2tpbmcgZmluYWwgYnV0dG9uIHRvIGNsb3NlJyk7XG4gICAgaWYgKGF3YWl0IHRoaXMuZ2V0TmF0aXZlQXR0cmlidXRlKCd2aXNpYmxlJywga2V5Ym9hcmQpID09PSAnZmFsc2UnKSB7XG4gICAgICBsb2cuZGVidWcoJ05vIHZpc2libGUga2V5Ym9hcmQgZm91bmQuIFJldHVybmluZycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgYnV0dG9ucyA9IGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKCdjbGFzcyBuYW1lJywgJ1hDVUlFbGVtZW50VHlwZUJ1dHRvbicsIHRydWUsIGtleWJvYXJkKTtcbiAgICBpZiAoXy5pc0VtcHR5KGJ1dHRvbnMpKSB7XG4gICAgICBsb2cud2FybihgTm8gYnV0dG9uIGVsZW1lbnRzIGZvdW5kLiBVbmFibGUgdG8gaGlkZS5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5uYXRpdmVDbGljayhfLmxhc3QoYnV0dG9ucykpO1xuICB9XG59O1xuXG5jb21tYW5kcy5nZXRTdHJpbmdzID0gaW9zQ29tbWFuZHMuZ2VuZXJhbC5nZXRTdHJpbmdzO1xuXG5jb21tYW5kcy5yZW1vdmVBcHAgPSBhc3luYyBmdW5jdGlvbiByZW1vdmVBcHAgKGJ1bmRsZUlkKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLm1vYmlsZVJlbW92ZUFwcCh7YnVuZGxlSWR9KTtcbn07XG5cbmNvbW1hbmRzLmxhdW5jaEFwcCA9IGlvc0NvbW1hbmRzLmdlbmVyYWwubGF1bmNoQXBwO1xuXG5jb21tYW5kcy5jbG9zZUFwcCA9IGlvc0NvbW1hbmRzLmdlbmVyYWwuY2xvc2VBcHA7XG5cbmNvbW1hbmRzLmtleXMgPSBhc3luYyBmdW5jdGlvbiBrZXlzIChrZXlzKSB7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkVycm9yKCdDb21tYW5kIHNob3VsZCBiZSBwcm94aWVkIHRvIFdEQScpO1xuICB9XG4gIGxldCBlbCA9IHV0aWwudW53cmFwRWxlbWVudChhd2FpdCB0aGlzLmFjdGl2ZSgpKTtcbiAgaWYgKF8uaXNFbXB0eShlbCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vU3VjaEVsZW1lbnRFcnJvcigpO1xuICB9XG4gIGF3YWl0IHRoaXMuc2V0VmFsdWUoa2V5cywgZWwpO1xufTtcblxuY29tbWFuZHMuc2V0VXJsID0gYXN5bmMgZnVuY3Rpb24gc2V0VXJsICh1cmwpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpICYmIHRoaXMuaXNSZWFsRGV2aWNlKCkpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy91cmwnLCAnUE9TVCcsIHt1cmx9KTtcbiAgfVxuICByZXR1cm4gYXdhaXQgaW9zQ29tbWFuZHMuZ2VuZXJhbC5zZXRVcmwuY2FsbCh0aGlzLCB1cmwpO1xufTtcblxuY29tbWFuZHMuZ2V0Vmlld3BvcnRSZWN0ID0gaW9zQ29tbWFuZHMuZGV2aWNlLmdldFZpZXdwb3J0UmVjdDtcblxuLy8gbWVtb2l6ZWQgaW4gY29uc3RydWN0b3JcbmNvbW1hbmRzLmdldFNjcmVlbkluZm8gPSBhc3luYyBmdW5jdGlvbiBnZXRTY3JlZW5JbmZvICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvd2RhL3NjcmVlbicsICdHRVQnKTtcbn07XG5cbmNvbW1hbmRzLmdldFN0YXR1c0JhckhlaWdodCA9IGFzeW5jIGZ1bmN0aW9uIGdldFN0YXR1c0JhckhlaWdodCAoKSB7XG4gIGNvbnN0IHtzdGF0dXNCYXJTaXplfSA9IGF3YWl0IHRoaXMuZ2V0U2NyZWVuSW5mbygpO1xuICByZXR1cm4gc3RhdHVzQmFyU2l6ZS5oZWlnaHQ7XG59O1xuXG4vLyBtZW1vaXplZCBpbiBjb25zdHJ1Y3RvclxuY29tbWFuZHMuZ2V0RGV2aWNlUGl4ZWxSYXRpbyA9IGFzeW5jIGZ1bmN0aW9uIGdldERldmljZVBpeGVsUmF0aW8gKCkge1xuICBjb25zdCB7c2NhbGV9ID0gYXdhaXQgdGhpcy5nZXRTY3JlZW5JbmZvKCk7XG4gIHJldHVybiBzY2FsZTtcbn07XG5cbmNvbW1hbmRzLm1vYmlsZVByZXNzQnV0dG9uID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlUHJlc3NCdXR0b24gKG9wdHMgPSB7fSkge1xuICBjb25zdCB7bmFtZX0gPSBvcHRzO1xuICBpZiAoIW5hbWUpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdygnQnV0dG9uIG5hbWUgaXMgbWFuZGF0b3J5Jyk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvd2RhL3ByZXNzQnV0dG9uJywgJ1BPU1QnLCB7bmFtZX0pO1xufTtcblxuY29tbWFuZHMubW9iaWxlU2lyaUNvbW1hbmQgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVTaXJpQ29tbWFuZCAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHt0ZXh0fSA9IG9wdHM7XG4gIGlmICghdXRpbC5oYXNWYWx1ZSh0ZXh0KSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KCdcInRleHRcIiBhcmd1bWVudCBpcyBtYW5kYXRvcnknKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEvc2lyaS9hY3RpdmF0ZScsICdQT1NUJywge3RleHR9KTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuXG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycywgZXh0ZW5zaW9ucyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2dlbmVyYWwuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==

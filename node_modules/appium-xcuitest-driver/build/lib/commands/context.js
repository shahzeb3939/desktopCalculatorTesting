"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumIosDriver = require("appium-ios-driver");

var _appiumRemoteDebugger = require("appium-remote-debugger");

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

const WEBVIEW_BASE = `${_appiumIosDriver.WEBVIEW_WIN}_`;
let commands = {},
    helpers = {},
    extensions = {};
Object.assign(extensions, _appiumIosDriver.iosCommands.context);

extensions.closeAlertBeforeTest = async function closeAlertBeforeTest() {
  return true;
};

extensions.navToInitialWebview = async function navToInitialWebview() {
  if (this.useNewSafari()) {
    await this.typeAndNavToUrl();
  } else if (!this.isRealDevice() && this.opts.safari) {
    await this.navToViewThroughFavorites();
  } else {
    await this.navToViewWithTitle(/.*/);
  }
};

extensions.getLatestWebviewContextForTitle = async function getLatestWebviewContextForTitle(regExp) {
  const currentUrl = this.getCurrentUrl();

  const contexts = _lodash.default.filter((await this.getContextsAndViews()), 'view');

  if (currentUrl) {
    for (const ctx of contexts) {
      if ((ctx.view.url || '') === this.getCurrentUrl()) {
        return ctx.id;
      }
    }
  }

  for (const ctx of contexts) {
    if (ctx.view.title && regExp.test(ctx.view.title) || ctx.view.url && regExp.test(ctx.view.url)) {
      return ctx.id;
    }
  }
};

extensions.isWebContext = function isWebContext() {
  return !!this.curContext && this.curContext !== _appiumIosDriver.iosCommands.context.NATIVE_WIN;
};

extensions.isWebview = function isWebview() {
  return this.isWebContext();
};

extensions.getNewRemoteDebugger = async function getNewRemoteDebugger() {
  let socketPath;

  if (!this.isRealDevice()) {
    socketPath = await this.opts.device.getWebInspectorSocket();
  }

  return (0, _appiumRemoteDebugger.createRemoteDebugger)({
    bundleId: this.opts.bundleId,
    isSafari: this.isSafari(),
    includeSafari: this.opts.includeSafariInWebviews,
    useNewSafari: this.useNewSafari(),
    pageLoadMs: this.pageLoadMs,
    platformVersion: this.opts.platformVersion,
    socketPath,
    remoteDebugProxy: this.opts.remoteDebugProxy,
    garbageCollectOnExecute: _appiumSupport.util.hasValue(this.opts.safariGarbageCollect) ? !!this.opts.safariGarbageCollect : false,
    udid: this.opts.udid
  }, this.isRealDevice());
};

commands.setContext = async function setContext(name, callback, skipReadyCheck) {
  function alreadyInContext(desired, current) {
    return desired === current || desired === null && current === _appiumIosDriver.NATIVE_WIN || desired === _appiumIosDriver.NATIVE_WIN && current === null;
  }

  function isNativeContext(context) {
    return context === _appiumIosDriver.NATIVE_WIN || context === null;
  }

  _logger.default.debug(`Attempting to set context to '${name}'`);

  if (alreadyInContext(name, this.curContext)) {
    return;
  }

  if (isNativeContext(name)) {
    this.curContext = null;
    return;
  }

  if (_lodash.default.isUndefined(this.contexts)) {
    await this.getContexts();
  }

  let contextId = name.replace(WEBVIEW_BASE, '');

  if (contextId === '') {
    contextId = this.contexts[1];
  }

  if (!_lodash.default.includes(this.contexts, contextId)) {
    throw new _appiumBaseDriver.errors.NoSuchContextError();
  }

  const [appIdKey, pageIdKey] = _lodash.default.map(contextId.split('.'), id => parseInt(id, 10));

  await this.remote.selectPage(appIdKey, pageIdKey, skipReadyCheck);
  this.curContext = contextId;

  if (this.opts.enablePerformanceLogging && this.remote) {
    _logger.default.debug(`Starting performance log on '${this.curContext}'`);

    this.logs.performance = new _appiumIosDriver.IOSPerformanceLog(this.remote);
    await this.logs.performance.startCapture();
  }

  if (name && name !== _appiumIosDriver.NATIVE_WIN && this.logs) {
    if (this.logs.safariConsole) {
      await this.remote.startConsole(this.logs.safariConsole.addLogLine.bind(this.logs.safariConsole));
    }

    if (this.logs.safariNetwork) {
      await this.remote.startNetwork(this.logs.safariNetwork.addLogLine.bind(this.logs.safariNetwork));
    }
  }
};

extensions.listWebFrames = async function listWebFrames(useUrl = true) {
  if (!this.opts.bundleId) {
    _logger.default.errorAndThrow('Cannot enter web frame without a bundle ID');
  }

  useUrl = useUrl && !this.isRealDevice() && !!this.getCurrentUrl();

  _logger.default.debug(`Selecting by url: ${useUrl} ${useUrl ? `(expected url: '${this.getCurrentUrl()}')` : ''}`);

  const currentUrl = useUrl ? this.getCurrentUrl() : undefined;
  let pageArray = [];

  const getWebviewPages = async () => {
    try {
      return await this.remote.selectApp(currentUrl, this.opts.webviewConnectRetries, this.opts.ignoreAboutBlankUrl);
    } catch (err) {
      _logger.default.debug(`No available web pages: ${err.message}`);

      return [];
    }
  };

  if (this.remote && this.remote.appIdKey) {
    pageArray = await getWebviewPages();
  } else {
    this.remote = await this.getNewRemoteDebugger();
    let appInfo = await this.remote.connect();

    if (!appInfo) {
      _logger.default.debug('Unable to connect to the remote debugger.');

      return [];
    }

    pageArray = await getWebviewPages();
    this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, this.onPageChange.bind(this));
    this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_FRAMES_DETACHED, () => {
      if (!_lodash.default.isEmpty(this.curWebFrames)) {
        _logger.default.debug(`Clearing ${this.curWebFrames.length} frames: ${this.curWebFrames.join(', ')}`);
      }

      this.curWebFrames = [];
    });
    const alertErrorMsg = 'Close alert failed. Retry.';

    try {
      await (0, _asyncbox.retryInterval)(6, 1000, async () => {
        if (!(await this.closeAlertBeforeTest())) {
          throw new Error(alertErrorMsg);
        }
      });
    } catch (err) {
      if (err.message !== alertErrorMsg) {
        _logger.default.errorAndThrow(err);
      }
    }
  }

  if (pageArray.length === 0) {
    _logger.default.debug('No web frames found.');
  }

  return pageArray;
};

extensions.mobileGetContexts = async function mobileGetContexts() {
  const curOpt = this.opts.fullContextList;

  try {
    this.opts.fullContextList = true;
    return await this.getContexts();
  } finally {
    this.opts.fullContextList = curOpt;
  }
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,

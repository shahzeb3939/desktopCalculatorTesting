"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumIosDriver = require("appium-ios-driver");

var _appiumBaseDriver = require("appium-base-driver");

let extensions = {};
Object.assign(extensions, _appiumIosDriver.iosCommands.execute);
const iosExecute = extensions.execute;

extensions.execute = async function execute(script, args) {
  if (!script.match(/^mobile:/) && !this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  return await iosExecute.call(this, script, args);
};

extensions.executeAsync = async function executeAsync(script, args) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  args = this.convertElementsForAtoms(args);
  this.asyncWaitMs = this.asyncWaitMs || 0;
  const promise = this.remote.executeAtomAsync('execute_async_script', [script, args, this.asyncWaitMs], this.curWebFrames);
  return await this.waitForAtom(promise);
};

extensions.executeMobile = async function executeMobile(mobileCommand, opts = {}) {
  const commandMap = {
    scroll: 'mobileScroll',
    swipe: 'mobileSwipe',
    pinch: 'mobilePinch',
    doubleTap: 'mobileDoubleTap',
    twoFingerTap: 'mobileTwoFingerTap',
    touchAndHold: 'mobileTouchAndHold',
    tap: 'mobileTap',
    dragFromToForDuration: 'mobileDragFromToForDuration',
    selectPickerWheelValue: 'mobileSelectPickerWheelValue',
    alert: 'mobileHandleAlert',
    setPasteboard: 'mobileSetPasteboard',
    getPasteboard: 'mobileGetPasteboard',
    source: 'mobileGetSource',
    getContexts: 'mobileGetContexts',
    installApp: 'mobileInstallApp',
    isAppInstalled: 'mobileIsAppInstalled',
    removeApp: 'mobileRemoveApp',
    launchApp: 'mobileLaunchApp',
    terminateApp: 'mobileTerminateApp',
    queryAppState: 'mobileQueryAppState',
    activateApp: 'mobileActivateApp',
    viewportScreenshot: 'getViewportScreenshot',
    startPerfRecord: 'mobileStartPerfRecord',
    stopPerfRecord: 'mobileStopPerfRecord',
    installCertificate: 'mobileInstallCertificate',
    startLogsBroadcast: 'mobileStartLogsBroadcast',
    stopLogsBroadcast: 'mobileStopLogsBroadcast',
    batteryInfo: 'mobileGetBatteryInfo',
    deviceInfo: 'mobileGetDeviceInfo',
    activeAppInfo: 'mobileGetActiveAppInfo',
    pressButton: 'mobilePressButton',
    enrollBiometric: 'mobileEnrollBiometric',
    sendBiometricMatch: 'mobileSendBiometricMatch',
    isBiometricEnrolled: 'mobileIsBiometricEnrolled',
    clearKeychains: 'mobileClearKeychains',
    getPermission: 'mobileGetPermission',
    siriCommand: 'mobileSiriCommand'
  };

  if (!_lodash.default.has(commandMap, mobileCommand)) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown mobile command '${mobileCommand}'. Only ${_lodash.default.keys(commandMap).join(', ')} commands are supported.`);
  }

  return await this[commandMap[mobileCommand]](opts);
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbImV4dGVuc2lvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJpb3NDb21tYW5kcyIsImV4ZWN1dGUiLCJpb3NFeGVjdXRlIiwic2NyaXB0IiwiYXJncyIsIm1hdGNoIiwiaXNXZWJDb250ZXh0IiwiZXJyb3JzIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsImNhbGwiLCJleGVjdXRlQXN5bmMiLCJjb252ZXJ0RWxlbWVudHNGb3JBdG9tcyIsImFzeW5jV2FpdE1zIiwicHJvbWlzZSIsInJlbW90ZSIsImV4ZWN1dGVBdG9tQXN5bmMiLCJjdXJXZWJGcmFtZXMiLCJ3YWl0Rm9yQXRvbSIsImV4ZWN1dGVNb2JpbGUiLCJtb2JpbGVDb21tYW5kIiwib3B0cyIsImNvbW1hbmRNYXAiLCJzY3JvbGwiLCJzd2lwZSIsInBpbmNoIiwiZG91YmxlVGFwIiwidHdvRmluZ2VyVGFwIiwidG91Y2hBbmRIb2xkIiwidGFwIiwiZHJhZ0Zyb21Ub0ZvckR1cmF0aW9uIiwic2VsZWN0UGlja2VyV2hlZWxWYWx1ZSIsImFsZXJ0Iiwic2V0UGFzdGVib2FyZCIsImdldFBhc3RlYm9hcmQiLCJzb3VyY2UiLCJnZXRDb250ZXh0cyIsImluc3RhbGxBcHAiLCJpc0FwcEluc3RhbGxlZCIsInJlbW92ZUFwcCIsImxhdW5jaEFwcCIsInRlcm1pbmF0ZUFwcCIsInF1ZXJ5QXBwU3RhdGUiLCJhY3RpdmF0ZUFwcCIsInZpZXdwb3J0U2NyZWVuc2hvdCIsInN0YXJ0UGVyZlJlY29yZCIsInN0b3BQZXJmUmVjb3JkIiwiaW5zdGFsbENlcnRpZmljYXRlIiwic3RhcnRMb2dzQnJvYWRjYXN0Iiwic3RvcExvZ3NCcm9hZGNhc3QiLCJiYXR0ZXJ5SW5mbyIsImRldmljZUluZm8iLCJhY3RpdmVBcHBJbmZvIiwicHJlc3NCdXR0b24iLCJlbnJvbGxCaW9tZXRyaWMiLCJzZW5kQmlvbWV0cmljTWF0Y2giLCJpc0Jpb21ldHJpY0Vucm9sbGVkIiwiY2xlYXJLZXljaGFpbnMiLCJnZXRQZXJtaXNzaW9uIiwic2lyaUNvbW1hbmQiLCJfIiwiaGFzIiwiVW5rbm93bkNvbW1hbmRFcnJvciIsImtleXMiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBLElBQUlBLFVBQVUsR0FBRyxFQUFqQjtBQUVBQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0YsVUFBZCxFQUEwQkcsNkJBQVlDLE9BQXRDO0FBRUEsTUFBTUMsVUFBVSxHQUFHTCxVQUFVLENBQUNJLE9BQTlCOztBQUNBSixVQUFVLENBQUNJLE9BQVgsR0FBcUIsZUFBZUEsT0FBZixDQUF3QkUsTUFBeEIsRUFBZ0NDLElBQWhDLEVBQXNDO0FBQ3pELE1BQUksQ0FBQ0QsTUFBTSxDQUFDRSxLQUFQLENBQWEsVUFBYixDQUFELElBQTZCLENBQUMsS0FBS0MsWUFBTCxFQUFsQyxFQUF1RDtBQUNyRCxVQUFNLElBQUlDLHlCQUFPQyxtQkFBWCxFQUFOO0FBQ0Q7O0FBRUQsU0FBTyxNQUFNTixVQUFVLENBQUNPLElBQVgsQ0FBZ0IsSUFBaEIsRUFBc0JOLE1BQXRCLEVBQThCQyxJQUE5QixDQUFiO0FBQ0QsQ0FORDs7QUFRQVAsVUFBVSxDQUFDYSxZQUFYLEdBQTBCLGVBQWVBLFlBQWYsQ0FBNkJQLE1BQTdCLEVBQXFDQyxJQUFyQyxFQUEyQztBQUNuRSxNQUFJLENBQUMsS0FBS0UsWUFBTCxFQUFMLEVBQTBCO0FBQ3hCLFVBQU0sSUFBSUMseUJBQU9DLG1CQUFYLEVBQU47QUFDRDs7QUFFREosRUFBQUEsSUFBSSxHQUFHLEtBQUtPLHVCQUFMLENBQTZCUCxJQUE3QixDQUFQO0FBQ0EsT0FBS1EsV0FBTCxHQUFtQixLQUFLQSxXQUFMLElBQW9CLENBQXZDO0FBQ0EsUUFBTUMsT0FBTyxHQUFHLEtBQUtDLE1BQUwsQ0FBWUMsZ0JBQVosQ0FBNkIsc0JBQTdCLEVBQXFELENBQUNaLE1BQUQsRUFBU0MsSUFBVCxFQUFlLEtBQUtRLFdBQXBCLENBQXJELEVBQXVGLEtBQUtJLFlBQTVGLENBQWhCO0FBQ0EsU0FBTyxNQUFNLEtBQUtDLFdBQUwsQ0FBaUJKLE9BQWpCLENBQWI7QUFDRCxDQVREOztBQVlBaEIsVUFBVSxDQUFDcUIsYUFBWCxHQUEyQixlQUFlQSxhQUFmLENBQThCQyxhQUE5QixFQUE2Q0MsSUFBSSxHQUFHLEVBQXBELEVBQXdEO0FBQ2pGLFFBQU1DLFVBQVUsR0FBRztBQUVqQkMsSUFBQUEsTUFBTSxFQUFFLGNBRlM7QUFHakJDLElBQUFBLEtBQUssRUFBRSxhQUhVO0FBSWpCQyxJQUFBQSxLQUFLLEVBQUUsYUFKVTtBQUtqQkMsSUFBQUEsU0FBUyxFQUFFLGlCQUxNO0FBTWpCQyxJQUFBQSxZQUFZLEVBQUUsb0JBTkc7QUFPakJDLElBQUFBLFlBQVksRUFBRSxvQkFQRztBQVFqQkMsSUFBQUEsR0FBRyxFQUFFLFdBUlk7QUFTakJDLElBQUFBLHFCQUFxQixFQUFFLDZCQVROO0FBVWpCQyxJQUFBQSxzQkFBc0IsRUFBRSw4QkFWUDtBQWFqQkMsSUFBQUEsS0FBSyxFQUFFLG1CQWJVO0FBZWpCQyxJQUFBQSxhQUFhLEVBQUUscUJBZkU7QUFnQmpCQyxJQUFBQSxhQUFhLEVBQUUscUJBaEJFO0FBa0JqQkMsSUFBQUEsTUFBTSxFQUFFLGlCQWxCUztBQW1CakJDLElBQUFBLFdBQVcsRUFBRSxtQkFuQkk7QUFzQmpCQyxJQUFBQSxVQUFVLEVBQUUsa0JBdEJLO0FBdUJqQkMsSUFBQUEsY0FBYyxFQUFFLHNCQXZCQztBQXdCakJDLElBQUFBLFNBQVMsRUFBRSxpQkF4Qk07QUF5QmpCQyxJQUFBQSxTQUFTLEVBQUUsaUJBekJNO0FBMEJqQkMsSUFBQUEsWUFBWSxFQUFFLG9CQTFCRztBQTJCakJDLElBQUFBLGFBQWEsRUFBRSxxQkEzQkU7QUE0QmpCQyxJQUFBQSxXQUFXLEVBQUUsbUJBNUJJO0FBK0JqQkMsSUFBQUEsa0JBQWtCLEVBQUUsdUJBL0JIO0FBaUNqQkMsSUFBQUEsZUFBZSxFQUFFLHVCQWpDQTtBQWtDakJDLElBQUFBLGNBQWMsRUFBRSxzQkFsQ0M7QUFvQ2pCQyxJQUFBQSxrQkFBa0IsRUFBRSwwQkFwQ0g7QUFzQ2pCQyxJQUFBQSxrQkFBa0IsRUFBRSwwQkF0Q0g7QUF1Q2pCQyxJQUFBQSxpQkFBaUIsRUFBRSx5QkF2Q0Y7QUF5Q2pCQyxJQUFBQSxXQUFXLEVBQUUsc0JBekNJO0FBMENqQkMsSUFBQUEsVUFBVSxFQUFFLHFCQTFDSztBQTJDakJDLElBQUFBLGFBQWEsRUFBRSx3QkEzQ0U7QUE2Q2pCQyxJQUFBQSxXQUFXLEVBQUUsbUJBN0NJO0FBK0NqQkMsSUFBQUEsZUFBZSxFQUFFLHVCQS9DQTtBQWdEakJDLElBQUFBLGtCQUFrQixFQUFFLDBCQWhESDtBQWlEakJDLElBQUFBLG1CQUFtQixFQUFFLDJCQWpESjtBQW1EakJDLElBQUFBLGNBQWMsRUFBRSxzQkFuREM7QUFxRGpCQyxJQUFBQSxhQUFhLEVBQUUscUJBckRFO0FBdURqQkMsSUFBQUEsV0FBVyxFQUFFO0FBdkRJLEdBQW5COztBQTBEQSxNQUFJLENBQUNDLGdCQUFFQyxHQUFGLENBQU12QyxVQUFOLEVBQWtCRixhQUFsQixDQUFMLEVBQXVDO0FBQ3JDLFVBQU0sSUFBSVoseUJBQU9zRCxtQkFBWCxDQUFnQywyQkFBMEIxQyxhQUFjLFdBQVV3QyxnQkFBRUcsSUFBRixDQUFPekMsVUFBUCxFQUFtQjBDLElBQW5CLENBQXdCLElBQXhCLENBQThCLDBCQUFoSCxDQUFOO0FBQ0Q7O0FBQ0QsU0FBTyxNQUFNLEtBQUsxQyxVQUFVLENBQUNGLGFBQUQsQ0FBZixFQUFnQ0MsSUFBaEMsQ0FBYjtBQUNELENBL0REOztlQWlFZXZCLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgaW9zQ29tbWFuZHMgfSBmcm9tICdhcHBpdW0taW9zLWRyaXZlcic7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuXG5cbmxldCBleHRlbnNpb25zID0ge307XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgaW9zQ29tbWFuZHMuZXhlY3V0ZSk7XG5cbmNvbnN0IGlvc0V4ZWN1dGUgPSBleHRlbnNpb25zLmV4ZWN1dGU7XG5leHRlbnNpb25zLmV4ZWN1dGUgPSBhc3luYyBmdW5jdGlvbiBleGVjdXRlIChzY3JpcHQsIGFyZ3MpIHtcbiAgaWYgKCFzY3JpcHQubWF0Y2goL15tb2JpbGU6LykgJiYgIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCBpb3NFeGVjdXRlLmNhbGwodGhpcywgc2NyaXB0LCBhcmdzKTtcbn07XG5cbmV4dGVuc2lvbnMuZXhlY3V0ZUFzeW5jID0gYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUFzeW5jIChzY3JpcHQsIGFyZ3MpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH1cblxuICBhcmdzID0gdGhpcy5jb252ZXJ0RWxlbWVudHNGb3JBdG9tcyhhcmdzKTtcbiAgdGhpcy5hc3luY1dhaXRNcyA9IHRoaXMuYXN5bmNXYWl0TXMgfHwgMDtcbiAgY29uc3QgcHJvbWlzZSA9IHRoaXMucmVtb3RlLmV4ZWN1dGVBdG9tQXN5bmMoJ2V4ZWN1dGVfYXN5bmNfc2NyaXB0JywgW3NjcmlwdCwgYXJncywgdGhpcy5hc3luY1dhaXRNc10sIHRoaXMuY3VyV2ViRnJhbWVzKTtcbiAgcmV0dXJuIGF3YWl0IHRoaXMud2FpdEZvckF0b20ocHJvbWlzZSk7XG59O1xuXG4vLyBPdmVycmlkZXMgdGhlICdleGVjdXRlTW9iaWxlJyBmdW5jdGlvbiBkZWZpbmVkIGluIGFwcGl1bS1pb3MtZHJpdmVyXG5leHRlbnNpb25zLmV4ZWN1dGVNb2JpbGUgPSBhc3luYyBmdW5jdGlvbiBleGVjdXRlTW9iaWxlIChtb2JpbGVDb21tYW5kLCBvcHRzID0ge30pIHtcbiAgY29uc3QgY29tbWFuZE1hcCA9IHtcbiAgICAvL3JlZ2lvbiBnZXN0dXJlcyBzdXBwb3J0XG4gICAgc2Nyb2xsOiAnbW9iaWxlU2Nyb2xsJyxcbiAgICBzd2lwZTogJ21vYmlsZVN3aXBlJyxcbiAgICBwaW5jaDogJ21vYmlsZVBpbmNoJyxcbiAgICBkb3VibGVUYXA6ICdtb2JpbGVEb3VibGVUYXAnLFxuICAgIHR3b0ZpbmdlclRhcDogJ21vYmlsZVR3b0ZpbmdlclRhcCcsXG4gICAgdG91Y2hBbmRIb2xkOiAnbW9iaWxlVG91Y2hBbmRIb2xkJyxcbiAgICB0YXA6ICdtb2JpbGVUYXAnLFxuICAgIGRyYWdGcm9tVG9Gb3JEdXJhdGlvbjogJ21vYmlsZURyYWdGcm9tVG9Gb3JEdXJhdGlvbicsXG4gICAgc2VsZWN0UGlja2VyV2hlZWxWYWx1ZTogJ21vYmlsZVNlbGVjdFBpY2tlcldoZWVsVmFsdWUnLFxuXG4gICAgLy9lbmRyZWdpb24gZ2VzdHVyZXMgc3VwcG9ydFxuICAgIGFsZXJ0OiAnbW9iaWxlSGFuZGxlQWxlcnQnLFxuXG4gICAgc2V0UGFzdGVib2FyZDogJ21vYmlsZVNldFBhc3RlYm9hcmQnLFxuICAgIGdldFBhc3RlYm9hcmQ6ICdtb2JpbGVHZXRQYXN0ZWJvYXJkJyxcblxuICAgIHNvdXJjZTogJ21vYmlsZUdldFNvdXJjZScsXG4gICAgZ2V0Q29udGV4dHM6ICdtb2JpbGVHZXRDb250ZXh0cycsXG5cbiAgICAvL3JlZ2lvbiBtdWx0aXBsZSBhcHBzIG1hbmFnZW1lbnRcbiAgICBpbnN0YWxsQXBwOiAnbW9iaWxlSW5zdGFsbEFwcCcsXG4gICAgaXNBcHBJbnN0YWxsZWQ6ICdtb2JpbGVJc0FwcEluc3RhbGxlZCcsXG4gICAgcmVtb3ZlQXBwOiAnbW9iaWxlUmVtb3ZlQXBwJyxcbiAgICBsYXVuY2hBcHA6ICdtb2JpbGVMYXVuY2hBcHAnLFxuICAgIHRlcm1pbmF0ZUFwcDogJ21vYmlsZVRlcm1pbmF0ZUFwcCcsXG4gICAgcXVlcnlBcHBTdGF0ZTogJ21vYmlsZVF1ZXJ5QXBwU3RhdGUnLFxuICAgIGFjdGl2YXRlQXBwOiAnbW9iaWxlQWN0aXZhdGVBcHAnLFxuICAgIC8vZW5kcmVnaW9uIG11bHRpcGxlIGFwcHMgbWFuYWdlbWVudFxuXG4gICAgdmlld3BvcnRTY3JlZW5zaG90OiAnZ2V0Vmlld3BvcnRTY3JlZW5zaG90JyxcblxuICAgIHN0YXJ0UGVyZlJlY29yZDogJ21vYmlsZVN0YXJ0UGVyZlJlY29yZCcsXG4gICAgc3RvcFBlcmZSZWNvcmQ6ICdtb2JpbGVTdG9wUGVyZlJlY29yZCcsXG5cbiAgICBpbnN0YWxsQ2VydGlmaWNhdGU6ICdtb2JpbGVJbnN0YWxsQ2VydGlmaWNhdGUnLFxuXG4gICAgc3RhcnRMb2dzQnJvYWRjYXN0OiAnbW9iaWxlU3RhcnRMb2dzQnJvYWRjYXN0JyxcbiAgICBzdG9wTG9nc0Jyb2FkY2FzdDogJ21vYmlsZVN0b3BMb2dzQnJvYWRjYXN0JyxcblxuICAgIGJhdHRlcnlJbmZvOiAnbW9iaWxlR2V0QmF0dGVyeUluZm8nLFxuICAgIGRldmljZUluZm86ICdtb2JpbGVHZXREZXZpY2VJbmZvJyxcbiAgICBhY3RpdmVBcHBJbmZvOiAnbW9iaWxlR2V0QWN0aXZlQXBwSW5mbycsXG5cbiAgICBwcmVzc0J1dHRvbjogJ21vYmlsZVByZXNzQnV0dG9uJyxcblxuICAgIGVucm9sbEJpb21ldHJpYzogJ21vYmlsZUVucm9sbEJpb21ldHJpYycsXG4gICAgc2VuZEJpb21ldHJpY01hdGNoOiAnbW9iaWxlU2VuZEJpb21ldHJpY01hdGNoJyxcbiAgICBpc0Jpb21ldHJpY0Vucm9sbGVkOiAnbW9iaWxlSXNCaW9tZXRyaWNFbnJvbGxlZCcsXG5cbiAgICBjbGVhcktleWNoYWluczogJ21vYmlsZUNsZWFyS2V5Y2hhaW5zJyxcblxuICAgIGdldFBlcm1pc3Npb246ICdtb2JpbGVHZXRQZXJtaXNzaW9uJyxcblxuICAgIHNpcmlDb21tYW5kOiAnbW9iaWxlU2lyaUNvbW1hbmQnLFxuICB9O1xuXG4gIGlmICghXy5oYXMoY29tbWFuZE1hcCwgbW9iaWxlQ29tbWFuZCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25Db21tYW5kRXJyb3IoYFVua25vd24gbW9iaWxlIGNvbW1hbmQgJyR7bW9iaWxlQ29tbWFuZH0nLiBPbmx5ICR7Xy5rZXlzKGNvbW1hbmRNYXApLmpvaW4oJywgJyl9IGNvbW1hbmRzIGFyZSBzdXBwb3J0ZWQuYCk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXNbY29tbWFuZE1hcFttb2JpbGVDb21tYW5kXV0ob3B0cyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZXhlY3V0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9

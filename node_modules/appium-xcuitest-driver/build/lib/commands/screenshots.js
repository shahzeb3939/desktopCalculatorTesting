"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _nodeSimctl = require("node-simctl");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

let commands = {};

commands.getScreenshot = async function getScreenshot() {
  const getScreenshotFromWDA = async () => {
    _logger.default.debug(`Taking screenshot with WDA`);

    const data = await this.proxyCommand('/screenshot', 'GET');

    if (!_lodash.default.isString(data)) {
      throw new Error(`Unable to take screenshot. WDA returned '${JSON.stringify(data)}'`);
    }

    return data;
  };

  if (this.mjpegStream) {
    _logger.default.info(`mjpeg video stream provided, returning latest frame as screenshot`);

    const data = await this.mjpegStream.lastChunkPNGBase64();

    if (data) {
      return data;
    }

    _logger.default.warn('Tried to get screenshot from active MJPEG stream, but there ' + 'was no data yet. Falling back to regular screenshot methods.');
  }

  try {
    return await getScreenshotFromWDA();
  } catch (err) {
    _logger.default.warn(`Error getting screenshot: ${err.message}`);
  }

  if (this.isSimulator()) {
    _logger.default.info(`Falling back to 'simctl io screenshot' API`);

    return await (0, _nodeSimctl.getScreenshot)(this.opts.udid);
  }

  return await (0, _asyncbox.retryInterval)(2, 1000, getScreenshotFromWDA);
};

commands.getElementScreenshot = async function getElementScreenshot(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('getElementScreenshot', [atomsElement]);
  }

  const data = await this.proxyCommand(`/element/${el}/screenshot`, 'GET');

  if (!_lodash.default.isString(data)) {
    _logger.default.errorAndThrow(`Unable to take a screenshot of the element ${el}. WDA returned '${JSON.stringify(data)}'`);
  }

  return data;
};

commands.getViewportScreenshot = async function getViewportScreenshot() {
  let statusBarHeight = await this.getStatusBarHeight();
  const screenshot = await this.getScreenshot();

  if (statusBarHeight === 0) {
    return screenshot;
  }

  const scale = await this.getDevicePixelRatio();
  statusBarHeight = Math.round(statusBarHeight * scale);
  const windowSize = await this.getWindowSize();
  let rect = {
    left: 0,
    top: statusBarHeight,
    width: windowSize.width * scale,
    height: windowSize.height * scale - statusBarHeight
  };
  let newScreenshot = await _appiumSupport.imageUtil.cropBase64Image(screenshot, rect);
  return newScreenshot;
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zY3JlZW5zaG90cy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImdldFNjcmVlbnNob3QiLCJnZXRTY3JlZW5zaG90RnJvbVdEQSIsImxvZyIsImRlYnVnIiwiZGF0YSIsInByb3h5Q29tbWFuZCIsIl8iLCJpc1N0cmluZyIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1qcGVnU3RyZWFtIiwiaW5mbyIsImxhc3RDaHVua1BOR0Jhc2U2NCIsIndhcm4iLCJlcnIiLCJtZXNzYWdlIiwiaXNTaW11bGF0b3IiLCJvcHRzIiwidWRpZCIsImdldEVsZW1lbnRTY3JlZW5zaG90IiwiZWwiLCJ1dGlsIiwidW53cmFwRWxlbWVudCIsImlzV2ViQ29udGV4dCIsImF0b21zRWxlbWVudCIsInVzZUF0b21zRWxlbWVudCIsImV4ZWN1dGVBdG9tIiwiZXJyb3JBbmRUaHJvdyIsImdldFZpZXdwb3J0U2NyZWVuc2hvdCIsInN0YXR1c0JhckhlaWdodCIsImdldFN0YXR1c0JhckhlaWdodCIsInNjcmVlbnNob3QiLCJzY2FsZSIsImdldERldmljZVBpeGVsUmF0aW8iLCJNYXRoIiwicm91bmQiLCJ3aW5kb3dTaXplIiwiZ2V0V2luZG93U2l6ZSIsInJlY3QiLCJsZWZ0IiwidG9wIiwid2lkdGgiLCJoZWlnaHQiLCJuZXdTY3JlZW5zaG90IiwiaW1hZ2VVdGlsIiwiY3JvcEJhc2U2NEltYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmOztBQUVBQSxRQUFRLENBQUNDLGFBQVQsR0FBeUIsZUFBZUEsYUFBZixHQUFnQztBQUN2RCxRQUFNQyxvQkFBb0IsR0FBRyxZQUFZO0FBQ3ZDQyxvQkFBSUMsS0FBSixDQUFXLDRCQUFYOztBQUNBLFVBQU1DLElBQUksR0FBRyxNQUFNLEtBQUtDLFlBQUwsQ0FBa0IsYUFBbEIsRUFBaUMsS0FBakMsQ0FBbkI7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QUExQixFQUFzQ08sSUFBdEMsQ0FBMUI7QUFDQSxTQUFPSyxhQUFQO0FBQ0QsQ0F0QkQ7O2VBd0JlN0MsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJldHJ5SW50ZXJ2YWwgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZ2V0U2NyZWVuc2hvdCBhcyBzaW1jdGxHZXRTY3JlZW5zaG90IH0gZnJvbSAnbm9kZS1zaW1jdGwnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgdXRpbCwgaW1hZ2VVdGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5sZXQgY29tbWFuZHMgPSB7fTtcblxuY29tbWFuZHMuZ2V0U2NyZWVuc2hvdCA9IGFzeW5jIGZ1bmN0aW9uIGdldFNjcmVlbnNob3QgKCkge1xuICBjb25zdCBnZXRTY3JlZW5zaG90RnJvbVdEQSA9IGFzeW5jICgpID0+IHtcbiAgICBsb2cuZGVidWcoYFRha2luZyBzY3JlZW5zaG90IHdpdGggV0RBYCk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvc2NyZWVuc2hvdCcsICdHRVQnKTtcbiAgICBpZiAoIV8uaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIHRha2Ugc2NyZWVuc2hvdC4gV0RBIHJldHVybmVkICcke0pTT04uc3RyaW5naWZ5KGRhdGEpfSdgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgLy8gaWYgd2UndmUgc3BlY2lmaWVkIGFuIG1qcGVnIHNlcnZlciwgdXNlIHRoYXRcbiAgaWYgKHRoaXMubWpwZWdTdHJlYW0pIHtcbiAgICBsb2cuaW5mbyhgbWpwZWcgdmlkZW8gc3RyZWFtIHByb3ZpZGVkLCByZXR1cm5pbmcgbGF0ZXN0IGZyYW1lIGFzIHNjcmVlbnNob3RgKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5tanBlZ1N0cmVhbS5sYXN0Q2h1bmtQTkdCYXNlNjQoKTtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGxvZy53YXJuKCdUcmllZCB0byBnZXQgc2NyZWVuc2hvdCBmcm9tIGFjdGl2ZSBNSlBFRyBzdHJlYW0sIGJ1dCB0aGVyZSAnICtcbiAgICAgICAgICAgICAnd2FzIG5vIGRhdGEgeWV0LiBGYWxsaW5nIGJhY2sgdG8gcmVndWxhciBzY3JlZW5zaG90IG1ldGhvZHMuJyk7XG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBnZXRTY3JlZW5zaG90RnJvbVdEQSgpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cud2FybihgRXJyb3IgZ2V0dGluZyBzY3JlZW5zaG90OiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG5cbiAgLy8gc2ltdWxhdG9yIGF0dGVtcHRcbiAgaWYgKHRoaXMuaXNTaW11bGF0b3IoKSkge1xuICAgIGxvZy5pbmZvKGBGYWxsaW5nIGJhY2sgdG8gJ3NpbWN0bCBpbyBzY3JlZW5zaG90JyBBUElgKTtcbiAgICByZXR1cm4gYXdhaXQgc2ltY3RsR2V0U2NyZWVuc2hvdCh0aGlzLm9wdHMudWRpZCk7XG4gIH1cblxuICAvLyBSZXRyeSBmb3IgcmVhbCBkZXZpY2VzIG9ubHkuIEZhaWwgZmFzdCBvbiBTaW11bGF0b3IgaWYgc2ltY3RsIGRvZXMgbm90IHdvcmsgYXMgZXhwZWN0ZWRcbiAgcmV0dXJuIGF3YWl0IHJldHJ5SW50ZXJ2YWwoMiwgMTAwMCwgZ2V0U2NyZWVuc2hvdEZyb21XREEpO1xufTtcblxuY29tbWFuZHMuZ2V0RWxlbWVudFNjcmVlbnNob3QgPSBhc3luYyBmdW5jdGlvbiBnZXRFbGVtZW50U2NyZWVuc2hvdCAoZWwpIHtcbiAgZWwgPSB1dGlsLnVud3JhcEVsZW1lbnQoZWwpO1xuICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIGNvbnN0IGF0b21zRWxlbWVudCA9IHRoaXMudXNlQXRvbXNFbGVtZW50KGVsKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnZ2V0RWxlbWVudFNjcmVlbnNob3QnLCBbYXRvbXNFbGVtZW50XSk7XG4gIH1cblxuICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC9lbGVtZW50LyR7ZWx9L3NjcmVlbnNob3RgLCAnR0VUJyk7XG4gIGlmICghXy5pc1N0cmluZyhkYXRhKSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBVbmFibGUgdG8gdGFrZSBhIHNjcmVlbnNob3Qgb2YgdGhlIGVsZW1lbnQgJHtlbH0uIFdEQSByZXR1cm5lZCAnJHtKU09OLnN0cmluZ2lmeShkYXRhKX0nYCk7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59O1xuXG5jb21tYW5kcy5nZXRWaWV3cG9ydFNjcmVlbnNob3QgPSBhc3luYyBmdW5jdGlvbiBnZXRWaWV3cG9ydFNjcmVlbnNob3QgKCkge1xuICBsZXQgc3RhdHVzQmFySGVpZ2h0ID0gYXdhaXQgdGhpcy5nZXRTdGF0dXNCYXJIZWlnaHQoKTtcbiAgY29uc3Qgc2NyZWVuc2hvdCA9IGF3YWl0IHRoaXMuZ2V0U2NyZWVuc2hvdCgpO1xuXG4gIC8vIGlmIHdlIGRvbid0IGhhdmUgYSBzdGF0dXMgYmFyLCB0aGVyZSdzIG5vdGhpbmcgdG8gY3JvcCwgc28gd2UgY2FuIGF2b2lkXG4gIC8vIGV4dHJhIGNhbGxzIGFuZCByZXR1cm4gc3RyYWlnaHRhd2F5XG4gIGlmIChzdGF0dXNCYXJIZWlnaHQgPT09IDApIHtcbiAgICByZXR1cm4gc2NyZWVuc2hvdDtcbiAgfVxuXG4gIGNvbnN0IHNjYWxlID0gYXdhaXQgdGhpcy5nZXREZXZpY2VQaXhlbFJhdGlvKCk7XG4gIC8vIHN0YXR1cyBiYXIgaGVpZ2h0IGNvbWVzIGluIHVuc2NhbGVkLCBzbyBzY2FsZSBpdFxuICBzdGF0dXNCYXJIZWlnaHQgPSBNYXRoLnJvdW5kKHN0YXR1c0JhckhlaWdodCAqIHNjYWxlKTtcbiAgY29uc3Qgd2luZG93U2l6ZSA9IGF3YWl0IHRoaXMuZ2V0V2luZG93U2l6ZSgpO1xuICBsZXQgcmVjdCA9IHtcbiAgICBsZWZ0OiAwLFxuICAgIHRvcDogc3RhdHVzQmFySGVpZ2h0LFxuICAgIHdpZHRoOiB3aW5kb3dTaXplLndpZHRoICogc2NhbGUsXG4gICAgaGVpZ2h0OiAoKHdpbmRvd1NpemUuaGVpZ2h0ICogc2NhbGUpIC0gc3RhdHVzQmFySGVpZ2h0KVxuICB9O1xuICBsZXQgbmV3U2NyZWVuc2hvdCA9IGF3YWl0IGltYWdlVXRpbC5jcm9wQmFzZTY0SW1hZ2Uoc2NyZWVuc2hvdCwgcmVjdCk7XG4gIHJldHVybiBuZXdTY3JlZW5zaG90O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9zY3JlZW5zaG90cy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9

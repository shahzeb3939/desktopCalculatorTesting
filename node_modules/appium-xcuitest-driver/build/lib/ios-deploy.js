"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _appiumIosDevice = require("appium-ios-device");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const APPLICATION_INSTALLED_NOTIFICATION = 'com.apple.mobile.application_installed';
const INSTALLATION_STAGING_DIR = 'PublicStaging';
const ITEM_PUSH_TIMEOUT = 30 * 1000;
const APPLICATION_NOTIFICATION_TIMEOUT = 30 * 1000;

class IOSDeploy {
  constructor(udid) {
    this.udid = udid;
  }

  async remove(bundleid) {
    const service = await _appiumIosDevice.services.startInstallationProxyService(this.udid);

    try {
      await service.uninstallApplication(bundleid);
    } finally {
      service.close();
    }
  }

  async removeApp(bundleId) {
    await this.remove(bundleId);
  }

  async install(app) {
    const start = new Date();

    try {
      const bundlePathOnPhone = await this.pushAppBundle(app);
      await this.installApplication(bundlePathOnPhone);

      _logger.default.info(`Installation is successful after ${new Date() - start}ms`);
    } catch (e) {
      _logger.default.error('Error was thrown during the installation process', e);

      throw new Error(`Could not install app: '${e.message}'`);
    }
  }

  async installApplication(bundlePathOnPhone) {
    const notificationService = await _appiumIosDevice.services.startNotificationProxyService(this.udid);
    const installationService = await _appiumIosDevice.services.startInstallationProxyService(this.udid);
    const appInstalledNotification = new _bluebird.default(resolve => {
      notificationService.observeNotification(APPLICATION_INSTALLED_NOTIFICATION, {
        notification: resolve
      });
    });

    try {
      await installationService.installApplication(bundlePathOnPhone, {
        PackageType: 'Developer'
      });

      try {
        await appInstalledNotification.timeout(APPLICATION_NOTIFICATION_TIMEOUT, `Couldn't get the application installed notification within ${APPLICATION_NOTIFICATION_TIMEOUT}ms but we will continue`);
      } catch (e) {
        _logger.default.warn(`Failed to receive the notification. Error: ${e.message}`);
      }
    } finally {
      installationService.close();
      notificationService.close();
    }
  }

  async pushAppBundle(app) {
    const start = new Date();
    const afcService = await _appiumIosDevice.services.startAfcService(this.udid);

    try {
      const bundlePathOnPhone = await this.createAppPath(afcService, app);
      await _appiumSupport.fs.walkDir(app, true, async (itemPath, isDir) => {
        const pathOnPhone = _path.default.join(bundlePathOnPhone, _path.default.relative(app, itemPath));

        if (isDir) {
          await afcService.createDirectory(pathOnPhone);
        } else {
          const readStream = _appiumSupport.fs.createReadStream(itemPath, {
            autoClose: true
          });

          const writeStream = await afcService.createWriteStream(pathOnPhone, {
            autoDestroy: true
          });
          writeStream.on('finish', writeStream.destroy);
          const itemPushWait = new _bluebird.default((resolve, reject) => {
            writeStream.on('close', resolve);
            writeStream.on('error', reject);
          });
          readStream.pipe(writeStream);
          await itemPushWait.timeout(ITEM_PUSH_TIMEOUT, `Couldn't push '${itemPath}' within the timeout ${ITEM_PUSH_TIMEOUT}ms`);
        }
      });

      _logger.default.debug(`Pushed the app files successfully after ${new Date() - start}ms`);

      return bundlePathOnPhone;
    } finally {
      afcService.close();
    }
  }

  async createAppPath(afcService, localAppPath) {
    const basename = _path.default.basename(localAppPath);

    const relativePath = _path.default.join(INSTALLATION_STAGING_DIR, basename);

    try {
      await afcService.deleteDirectory(relativePath);
    } catch (ign) {}

    await afcService.createDirectory(relativePath);
    return relativePath;
  }

  async installApp(app) {
    await this.install(app);
  }

  async isAppInstalled(bundleid) {
    const service = await _appiumIosDevice.services.startInstallationProxyService(this.udid);

    try {
      const applications = await service.lookupApplications({
        bundleIds: bundleid
      });
      return !!applications[bundleid];
    } finally {
      service.close();
    }
  }

  async getUserInstalledBundleIdsByBundleName(bundleName) {
    const service = await _appiumIosDevice.services.startInstallationProxyService(this.udid);

    try {
      const applications = await service.listApplications({
        applicationType: 'User'
      });
      return _lodash.default.reduce(applications, (acc, {
        CFBundleName
      }, key) => {
        if (CFBundleName === bundleName) {
          acc.push(key);
        }

        return acc;
      }, []);
    } finally {
      service.close();
    }
  }

}

var _default = IOSDeploy;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pb3MtZGVwbG95LmpzIl0sIm5hbWVzIjpbIkFQUExJQ0FUSU9OX0lOU1RBTExFRF9OT1RJRklDQVRJT04iLCJJTlNUQUxMQVRJT05fU1RBR0lOR19ESVIiLCJJVEVNX1BVU0hfVElNRU9VVCIsIkFQUExJQ0FUSU9OX05PVElGSUNBVElPTl9USU1FT1VUIiwiSU9TRGVwbG95IiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwicmVtb3ZlIiwiYnVuZGxlaWQiLCJzZXJ2aWNlIiwic2VydmljZXMiLCJzdGFydEluc3RhbGxhdGlvblByb3h5U2VydmljZSIsInVuaW5zdGFsbEFwcGxpY2F0aW9uIiwiY2xvc2UiLCJyZW1vdmVBcHAiLCJidW5kbGVJZCIsImluc3RhbGwiLCJhcHAiLCJzdGFydCIsIkRhdGUiLCJidW5kbGVQYXRoT25QaG9uZSIsInB1c2hBcHBCdW5kbGUiLCJpbnN0YWxsQXBwbGljYXRpb24iLCJsb2ciLCJpbmZvIiwiZSIsImVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwibm90aWZpY2F0aW9uU2VydmljZSIsInN0YXJ0Tm90aWZpY2F0aW9uUHJveHlTZXJ2aWNlIiwiaW5zdGFsbGF0aW9uU2VydmljZSIsImFwcEluc3RhbGxlZE5vdGlmaWNhdGlvbiIsIkIiLCJyZXNvbHZlIiwib2JzZXJ2ZU5vdGlmaWNhdGlvbiIsIm5vdGlmaWNhdGlvbiIsIlBhY2thZ2VUeXBlIiwidGltZW91dCIsIndhcm4iLCJhZmNTZXJ2aWNlIiwic3RhcnRBZmNTZXJ2aWNlIiwiY3JlYXRlQXBwUGF0aCIsImZzIiwid2Fsa0RpciIsIml0ZW1QYXRoIiwiaXNEaXIiLCJwYXRoT25QaG9uZSIsInBhdGgiLCJqb2luIiwicmVsYXRpdmUiLCJjcmVhdGVEaXJlY3RvcnkiLCJyZWFkU3RyZWFtIiwiY3JlYXRlUmVhZFN0cmVhbSIsImF1dG9DbG9zZSIsIndyaXRlU3RyZWFtIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJhdXRvRGVzdHJveSIsIm9uIiwiZGVzdHJveSIsIml0ZW1QdXNoV2FpdCIsInJlamVjdCIsInBpcGUiLCJkZWJ1ZyIsImxvY2FsQXBwUGF0aCIsImJhc2VuYW1lIiwicmVsYXRpdmVQYXRoIiwiZGVsZXRlRGlyZWN0b3J5IiwiaWduIiwiaW5zdGFsbEFwcCIsImlzQXBwSW5zdGFsbGVkIiwiYXBwbGljYXRpb25zIiwibG9va3VwQXBwbGljYXRpb25zIiwiYnVuZGxlSWRzIiwiZ2V0VXNlckluc3RhbGxlZEJ1bmRsZUlkc0J5QnVuZGxlTmFtZSIsImJ1bmRsZU5hbWUiLCJsaXN0QXBwbGljYXRpb25zIiwiYXBwbGljYXRpb25UeXBlIiwiXyIsInJlZHVjZSIsImFjYyIsIkNGQnVuZGxlTmFtZSIsImtleSIsInB1c2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsa0NBQWtDLEdBQUcsd0NBQTNDO0FBQ0EsTUFBTUMsd0JBQXdCLEdBQUcsZUFBakM7QUFDQSxNQUFNQyxpQkFBaUIsR0FBRyxLQUFLLElBQS9CO0FBQ0EsTUFBTUMsZ0NBQWdDLEdBQUcsS0FBSyxJQUE5Qzs7QUFFQSxNQUFNQyxTQUFOLENBQWdCO0FBRWRDLEVBQUFBLFdBQVcsQ0FBRUMsSUFBRixFQUFRO0FBQ2pCLFNBQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNEOztBQUVELFFBQU1DLE1BQU4sQ0FBY0MsUUFBZCxFQUF3QjtBQUN0QixVQUFNQyxPQUFPLEdBQUcsTUFBTUMsMEJBQVNDLDZCQUFULENBQXVDLEtBQUtMLElBQTVDLENBQXRCOztBQUNBLFFBQUk7QUFDRixZQUFNRyxPQUFPLENBQUNHLG9CQUFSLENBQTZCSixRQUE3QixDQUFOO0FBQ0QsS0FGRCxTQUVVO0FBQ1JDLE1BQUFBLE9BQU8sQ0FBQ0ksS0FBUjtBQUNEO0FBQ0Y7O0FBRUQsUUFBTUMsU0FBTixDQUFpQkMsUUFBakIsRUFBMkI7QUFDekIsVUFBTSxLQUFLUixNQUFMLENBQVlRLFFBQVosQ0FBTjtBQUNEOztBQUVELFFBQU1DLE9BQU4sQ0FBZUMs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L1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IHNlcnZpY2VzIH0gZnJvbSAnYXBwaXVtLWlvcy1kZXZpY2UnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBBUFBMSUNBVElPTl9JTlNUQUxMRURfTk9USUZJQ0FUSU9OID0gJ2NvbS5hcHBsZS5tb2JpbGUuYXBwbGljYXRpb25faW5zdGFsbGVkJztcbmNvbnN0IElOU1RBTExBVElPTl9TVEFHSU5HX0RJUiA9ICdQdWJsaWNTdGFnaW5nJztcbmNvbnN0IElURU1fUFVTSF9USU1FT1VUID0gMzAgKiAxMDAwO1xuY29uc3QgQVBQTElDQVRJT05fTk9USUZJQ0FUSU9OX1RJTUVPVVQgPSAzMCAqIDEwMDA7XG5cbmNsYXNzIElPU0RlcGxveSB7XG5cbiAgY29uc3RydWN0b3IgKHVkaWQpIHtcbiAgICB0aGlzLnVkaWQgPSB1ZGlkO1xuICB9XG5cbiAgYXN5bmMgcmVtb3ZlIChidW5kbGVpZCkge1xuICAgIGNvbnN0IHNlcnZpY2UgPSBhd2FpdCBzZXJ2aWNlcy5zdGFydEluc3RhbGxhdGlvblByb3h5U2VydmljZSh0aGlzLnVkaWQpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBzZXJ2aWNlLnVuaW5zdGFsbEFwcGxpY2F0aW9uKGJ1bmRsZWlkKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2VydmljZS5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJlbW92ZUFwcCAoYnVuZGxlSWQpIHtcbiAgICBhd2FpdCB0aGlzLnJlbW92ZShidW5kbGVJZCk7XG4gIH1cblxuICBhc3luYyBpbnN0YWxsIChhcHApIHtcbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJ1bmRsZVBhdGhPblBob25lID0gYXdhaXQgdGhpcy5wdXNoQXBwQnVuZGxlKGFwcCk7XG4gICAgICBhd2FpdCB0aGlzLmluc3RhbGxBcHBsaWNhdGlvbihidW5kbGVQYXRoT25QaG9uZSk7XG4gICAgICBsb2cuaW5mbyhgSW5zdGFsbGF0aW9uIGlzIHN1Y2Nlc3NmdWwgYWZ0ZXIgJHtuZXcgRGF0ZSgpIC0gc3RhcnR9bXNgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2cuZXJyb3IoJ0Vycm9yIHdhcyB0aHJvd24gZHVyaW5nIHRoZSBpbnN0YWxsYXRpb24gcHJvY2VzcycsIGUpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgaW5zdGFsbCBhcHA6ICcke2UubWVzc2FnZX0nYCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgaW5zdGFsbEFwcGxpY2F0aW9uIChidW5kbGVQYXRoT25QaG9uZSkge1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvblNlcnZpY2UgPSBhd2FpdCBzZXJ2aWNlcy5zdGFydE5vdGlmaWNhdGlvblByb3h5U2VydmljZSh0aGlzLnVkaWQpO1xuICAgIGNvbnN0IGluc3RhbGxhdGlvblNlcnZpY2UgPSBhd2FpdCBzZXJ2aWNlcy5zdGFydEluc3RhbGxhdGlvblByb3h5U2VydmljZSh0aGlzLnVkaWQpO1xuICAgIGNvbnN0IGFwcEluc3RhbGxlZE5vdGlmaWNhdGlvbiA9IG5ldyBCKChyZXNvbHZlKSA9PiB7XG4gICAgICBub3RpZmljYXRpb25TZXJ2aWNlLm9ic2VydmVOb3RpZmljYXRpb24oQVBQTElDQVRJT05fSU5TVEFMTEVEX05PVElGSUNBVElPTiwgeyBub3RpZmljYXRpb246IHJlc29sdmUgfSk7XG4gICAgfSk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGluc3RhbGxhdGlvblNlcnZpY2UuaW5zdGFsbEFwcGxpY2F0aW9uKGJ1bmRsZVBhdGhPblBob25lLCB7IFBhY2thZ2VUeXBlOiAnRGV2ZWxvcGVyJ30pO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgYXBwSW5zdGFsbGVkTm90aWZpY2F0aW9uLnRpbWVvdXQoQVBQTElDQVRJT05fTk9USUZJQ0FUSU9OX1RJTUVPVVQsIGBDb3VsZG4ndCBnZXQgdGhlIGFwcGxpY2F0aW9uIGluc3RhbGxlZCBub3RpZmljYXRpb24gd2l0aGluICR7QVBQTElDQVRJT05fTk9USUZJQ0FUSU9OX1RJTUVPVVR9bXMgYnV0IHdlIHdpbGwgY29udGludWVgKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nLndhcm4oYEZhaWxlZCB0byByZWNlaXZlIHRoZSBub3RpZmljYXRpb24uIEVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaW5zdGFsbGF0aW9uU2VydmljZS5jbG9zZSgpO1xuICAgICAgbm90aWZpY2F0aW9uU2VydmljZS5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHB1c2hBcHBCdW5kbGUgKGFwcCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBhZmNTZXJ2aWNlID0gYXdhaXQgc2VydmljZXMuc3RhcnRBZmNTZXJ2aWNlKHRoaXMudWRpZCk7XG4gICAgLy8gV2UgYXJlIHB1c2hpbmcgc2VyaWFsbHkgZHVlIHRvIHRoaXMgaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0vaXNzdWVzLzEzMTE1LiBUaGVyZSBpcyBub3RoaW5nIGVsc2Ugd2UgY2FuIGRvIGJlc2lkZXMgdGhpc1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBidW5kbGVQYXRoT25QaG9uZSA9IGF3YWl0IHRoaXMuY3JlYXRlQXBwUGF0aChhZmNTZXJ2aWNlLCBhcHApO1xuICAgICAgYXdhaXQgZnMud2Fsa0RpcihhcHAsIHRydWUsIGFzeW5jIChpdGVtUGF0aCwgaXNEaXIpID0+IHtcbiAgICAgICAgY29uc3QgcGF0aE9uUGhvbmUgPSBwYXRoLmpvaW4oYnVuZGxlUGF0aE9uUGhvbmUsIHBhdGgucmVsYXRpdmUoYXBwLCBpdGVtUGF0aCkpO1xuICAgICAgICBpZiAoaXNEaXIpIHtcbiAgICAgICAgICBhd2FpdCBhZmNTZXJ2aWNlLmNyZWF0ZURpcmVjdG9yeShwYXRoT25QaG9uZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgcmVhZFN0cmVhbSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0oaXRlbVBhdGgsIHthdXRvQ2xvc2U6IHRydWV9KTtcbiAgICAgICAgICBjb25zdCB3cml0ZVN0cmVhbSA9IGF3YWl0IGFmY1NlcnZpY2UuY3JlYXRlV3JpdGVTdHJlYW0ocGF0aE9uUGhvbmUsIHthdXRvRGVzdHJveTogdHJ1ZSB9KTtcbiAgICAgICAgICB3cml0ZVN0cmVhbS5vbignZmluaXNoJywgd3JpdGVTdHJlYW0uZGVzdHJveSk7XG4gICAgICAgICAgY29uc3QgaXRlbVB1c2hXYWl0ID0gbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgd3JpdGVTdHJlYW0ub24oJ2Nsb3NlJywgcmVzb2x2ZSk7XG4gICAgICAgICAgICB3cml0ZVN0cmVhbS5vbignZXJyb3InLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlYWRTdHJlYW0ucGlwZSh3cml0ZVN0cmVhbSk7XG4gICAgICAgICAgYXdhaXQgaXRlbVB1c2hXYWl0LnRpbWVvdXQoSVRFTV9QVVNIX1RJTUVPVVQsIGBDb3VsZG4ndCBwdXNoICcke2l0ZW1QYXRofScgd2l0aGluIHRoZSB0aW1lb3V0ICR7SVRFTV9QVVNIX1RJTUVPVVR9bXNgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBsb2cuZGVidWcoYFB1c2hlZCB0aGUgYXBwIGZpbGVzIHN1Y2Nlc3NmdWxseSBhZnRlciAke25ldyBEYXRlKCkgLSBzdGFydH1tc2ApO1xuICAgICAgcmV0dXJuIGJ1bmRsZVBhdGhPblBob25lO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBhZmNTZXJ2aWNlLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY3JlYXRlQXBwUGF0aCAoYWZjU2VydmljZSwgbG9jYWxBcHBQYXRoKSB7XG4gICAgY29uc3QgYmFzZW5hbWUgPSBwYXRoLmJhc2VuYW1lKGxvY2FsQXBwUGF0aCk7XG4gICAgY29uc3QgcmVsYXRpdmVQYXRoID0gcGF0aC5qb2luKElOU1RBTExBVElPTl9TVEFHSU5HX0RJUiwgYmFzZW5hbWUpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBhZmNTZXJ2aWNlLmRlbGV0ZURpcmVjdG9yeShyZWxhdGl2ZVBhdGgpO1xuICAgIH0gY2F0Y2ggKGlnbikge31cbiAgICBhd2FpdCBhZmNTZXJ2aWNlLmNyZWF0ZURpcmVjdG9yeShyZWxhdGl2ZVBhdGgpO1xuICAgIHJldHVybiByZWxhdGl2ZVBhdGg7XG4gIH1cblxuICBhc3luYyBpbnN0YWxsQXBwIChhcHApIHtcbiAgICBhd2FpdCB0aGlzLmluc3RhbGwoYXBwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXBwbGljYXRpb24gb2JqZWN0IGlmIHRlc3QgYXBwIGhhcyAnYnVuZGxlaWQnLlxuICAgKiBUaGUgdGFyZ2V0IGJ1bmRsZWlkIGNhbiBiZSBVc2VyIGFuZCBTeXN0ZW0gYXBwcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZWlkIFRoZSBidW5kbGVJZCB0byBlbnN1cmUgaXQgaXMgaW5zdGFsbGVkXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgVHJ1ZSBpZiB0aGUgYnVuZGxlaWQgZXhpc3RzIGluIHRoZSByZXN1bHQgb2YgJ2xpc3RBcHBsaWNhdGlvbnMnIGxpa2U6XG4gICAqIHsgXCJjb20uYXBwbGUuUHJlZmVyZW5jZXNcIjp7XG4gICAqICAgXCJVSVJlcXVpcmVkRGV2aWNlQ2FwYWJpbGl0aWVzXCI6W1wiYXJtNjRcIl0sXG4gICAqICAgXCJVSVJlcXVpcmVzRnVsbFNjcmVlblwiOnRydWUsXG4gICAqICAgXCJDRkJ1bmRsZUluZm9EaWN0aW9uYXJ5VmVyc2lvblwiOlwiNi4wXCIsXG4gICAqICAgXCJFbnRpdGxlbWVudHNcIjpcbiAgICogICAgIHtcImNvbS5hcHBsZS5mcm9udGJvYXJkLmRlbGV0ZS1hcHBsaWNhdGlvbi1zbmFwc2hvdHNcIjp0cnVlLC4uXG4gICAqL1xuICBhc3luYyBpc0FwcEluc3RhbGxlZCAoYnVuZGxlaWQpIHtcbiAgICBjb25zdCBzZXJ2aWNlID0gYXdhaXQgc2VydmljZXMuc3RhcnRJbnN0YWxsYXRpb25Qcm94eVNlcnZpY2UodGhpcy51ZGlkKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYXBwbGljYXRpb25zID0gYXdhaXQgc2VydmljZS5sb29rdXBBcHBsaWNhdGlvbnMoeyBidW5kbGVJZHM6IGJ1bmRsZWlkIH0pO1xuICAgICAgcmV0dXJuICEhYXBwbGljYXRpb25zW2J1bmRsZWlkXTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2VydmljZS5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlTmFtZSBUaGUgbmFtZSBvZiBDRkJ1bmRsZU5hbWUgaW4gSW5mby5wbGlzdFxuICAgKlxuICAgKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn0gQSBsaXN0IG9mIFVzZXIgbGV2ZWwgYXBwcycgYnVuZGxlIGlkcyB3aGljaCBoYXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICdDRkJ1bmRsZU5hbWUnIGF0dHJpYnV0ZSBhcyAnYnVuZGxlTmFtZScuXG4gICAqL1xuICBhc3luYyBnZXRVc2VySW5zdGFsbGVkQnVuZGxlSWRzQnlCdW5kbGVOYW1lIChidW5kbGVOYW1lKSB7XG4gICAgY29uc3Qgc2VydmljZSA9IGF3YWl0IHNlcnZpY2VzLnN0YXJ0SW5zdGFsbGF0aW9uUHJveHlTZXJ2aWNlKHRoaXMudWRpZCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFwcGxpY2F0aW9ucyA9IGF3YWl0IHNlcnZpY2UubGlzdEFwcGxpY2F0aW9ucyh7YXBwbGljYXRpb25UeXBlOiAnVXNlcid9KTtcbiAgICAgIHJldHVybiBfLnJlZHVjZShhcHBsaWNhdGlvbnMsIChhY2MsIHtDRkJ1bmRsZU5hbWV9LCBrZXkpID0+IHtcbiAgICAgICAgaWYgKENGQnVuZGxlTmFtZSA9PT0gYnVuZGxlTmFtZSkge1xuICAgICAgICAgIGFjYy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIFtdKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2VydmljZS5jbG9zZSgpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJT1NEZXBsb3k7XG4iXSwiZmlsZSI6ImxpYi9pb3MtZGVwbG95LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
